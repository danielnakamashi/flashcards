{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Card, Topic } from '@flashcards/core';\n\nvar UseCases = /*#__PURE__*/function () {\n  function UseCases(firebaseService, graphqlService) {\n    _classCallCheck(this, UseCases);\n\n    _defineProperty(this, \"firebaseService\", void 0);\n\n    _defineProperty(this, \"graphqlService\", void 0);\n\n    this.firebaseService = firebaseService;\n    this.graphqlService = graphqlService;\n  }\n\n  _createClass(UseCases, [{\n    key: \"addCard\",\n    value: function () {\n      var _addCard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, input) {\n        var cardData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.graphqlService.addCard(token, input);\n\n              case 2:\n                cardData = _context.sent;\n                return _context.abrupt(\"return\", new Card(cardData));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addCard(_x, _x2) {\n        return _addCard.apply(this, arguments);\n      }\n\n      return addCard;\n    }()\n  }, {\n    key: \"addTopic\",\n    value: function () {\n      var _addTopic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token, data) {\n        var topicData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.graphqlService.addTopic(token, data);\n\n              case 2:\n                topicData = _context2.sent;\n                return _context2.abrupt(\"return\", new Topic({\n                  id: topicData.id,\n                  name: topicData.name,\n                  cards: topicData.cards.map(function (card) {\n                    return new Card(card);\n                  })\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function addTopic(_x3, _x4) {\n        return _addTopic.apply(this, arguments);\n      }\n\n      return addTopic;\n    }()\n  }, {\n    key: \"getCurrentUser\",\n    value: function getCurrentUser() {\n      return this.firebaseService.getCurrentUser();\n    }\n  }, {\n    key: \"getTopic\",\n    value: function () {\n      var _getTopic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token, topicId) {\n        var topicData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.graphqlService.getTopic(token, topicId);\n\n              case 2:\n                topicData = _context3.sent;\n                return _context3.abrupt(\"return\", new Topic({\n                  id: topicData.id,\n                  name: topicData.name,\n                  cards: topicData.cards.map(function (card) {\n                    return new Card(card);\n                  })\n                }));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getTopic(_x5, _x6) {\n        return _getTopic.apply(this, arguments);\n      }\n\n      return getTopic;\n    }()\n  }]);\n\n  return UseCases;\n}();\n\nexport { UseCases };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/usecase/index.ts"],"names":["Card","Topic","UseCases","firebaseService","graphqlService","token","input","addCard","cardData","data","addTopic","topicData","id","name","cards","map","card","getCurrentUser","topicId","getTopic"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,KAAf,QAAkC,kBAAlC;;IAQMC,Q;AAIJ,oBAAYC,eAAZ,EAA8CC,cAA9C,EAA8E;AAAA;;AAAA;;AAAA;;AAC5E,SAAKD,eAAL,GAAuBA,eAAvB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACD;;;;;+FAEaC,K,EAAeC,K;;;;;;;uBACJ,KAAKF,cAAL,CAAoBG,OAApB,CAA4BF,KAA5B,EAAmCC,KAAnC,C;;;AAAjBE,gBAAAA,Q;iDACC,IAAIR,IAAJ,CAASQ,QAAT,C;;;;;;;;;;;;;;;;;;;iGAGMH,K,EAAeI,I;;;;;;;uBACJ,KAAKL,cAAL,CAAoBM,QAApB,CAA6BL,KAA7B,EAAoCI,IAApC,C;;;AAAlBE,gBAAAA,S;kDACC,IAAIV,KAAJ,CAAU;AACfW,kBAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,kBAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,kBAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,2BAAI,IAAIhB,IAAJ,CAASgB,IAAT,CAAJ;AAAA,mBAAxB;AAHQ,iBAAV,C;;;;;;;;;;;;;;;;;;qCAOuB;AAC9B,aAAO,KAAKb,eAAL,CAAqBc,cAArB,EAAP;AACD;;;;iGAEcZ,K,EAAea,O;;;;;;;uBACJ,KAAKd,cAAL,CAAoBe,QAApB,CAA6Bd,KAA7B,EAAoCa,OAApC,C;;;AAAlBP,gBAAAA,S;kDACC,IAAIV,KAAJ,CAAU;AACfW,kBAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,kBAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,kBAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,2BAAI,IAAIhB,IAAJ,CAASgB,IAAT,CAAJ;AAAA,mBAAxB;AAHQ,iBAAV,C;;;;;;;;;;;;;;;;;;;;;AAQX,SAASd,QAAT","sourcesContent":["import { Card, Topic, User } from '@flashcards/core'\nimport { FirebaseService } from '../service/firebase/service'\nimport { GraphqlService } from '../service/graphql/service'\nimport { AddCardInput, AddCardUseCase } from './AddCard'\nimport { AddTopicInput, AddTopicUseCase } from './AddTopic'\nimport { GetCurrentUserUseCase } from './GetCurrentUser'\nimport { GetTopicUseCase } from './GetTopic'\n\nclass UseCases implements AddCardUseCase, AddTopicUseCase, GetCurrentUserUseCase, GetTopicUseCase {\n  private readonly firebaseService: FirebaseService\n  private readonly graphqlService: GraphqlService\n\n  constructor(firebaseService: FirebaseService, graphqlService: GraphqlService) {\n    this.firebaseService = firebaseService\n    this.graphqlService = graphqlService\n  }\n\n  async addCard(token: string, input: AddCardInput): Promise<Card> {\n    const cardData = await this.graphqlService.addCard(token, input)\n    return new Card(cardData)\n  }\n\n  async addTopic(token: string, data: AddTopicInput): Promise<Topic> {\n    const topicData = await this.graphqlService.addTopic(token, data)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n\n  getCurrentUser(): Promise<User> {\n    return this.firebaseService.getCurrentUser()\n  }\n\n  async getTopic(token: string, topicId: string): Promise<Topic> {\n    const topicData = await this.graphqlService.getTopic(token, topicId)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n}\n\nexport { UseCases }\n"]},"metadata":{},"sourceType":"module"}