{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, Topic } from '@flashcards/core';\n\nclass UseCases {\n  constructor(firebaseService, graphqlService) {\n    _defineProperty(this, \"firebaseService\", void 0);\n\n    _defineProperty(this, \"graphqlService\", void 0);\n\n    this.firebaseService = firebaseService;\n    this.graphqlService = graphqlService;\n  }\n\n  async addCard(token, input) {\n    const cardData = await this.graphqlService.addCard(token, input);\n    return new Card(cardData);\n  }\n\n  async addTopic(token, data) {\n    const topicData = await this.graphqlService.addTopic(token, data);\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    });\n  }\n\n  getCurrentUser() {\n    return this.firebaseService.getCurrentUser();\n  }\n\n  async getTopic(token, topicId) {\n    const topicData = await this.graphqlService.getTopic(token, topicId);\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    });\n  }\n\n  async getTopics(token) {\n    const topics = await this.graphqlService.getTopics(token);\n    return topics.map(topicData => new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    }));\n  }\n\n}\n\nexport { UseCases };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/usecase/index.ts"],"names":["Card","Topic","UseCases","constructor","firebaseService","graphqlService","addCard","token","input","cardData","addTopic","data","topicData","id","name","cards","map","card","getCurrentUser","getTopic","topicId","getTopics","topics"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,KAAf,QAAkC,kBAAlC;;AASA,MAAMC,QAAN,CAMqB;AAInBC,EAAAA,WAAW,CAACC,eAAD,EAAmCC,cAAnC,EAAmE;AAAA;;AAAA;;AAC5E,SAAKD,eAAL,GAAuBA,eAAvB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACD;;AAED,QAAMC,OAAN,CAAcC,KAAd,EAA6BC,KAA7B,EAAiE;AAC/D,UAAMC,QAAQ,GAAG,MAAM,KAAKJ,cAAL,CAAoBC,OAApB,CAA4BC,KAA5B,EAAmCC,KAAnC,CAAvB;AACA,WAAO,IAAIR,IAAJ,CAASS,QAAT,CAAP;AACD;;AAED,QAAMC,QAAN,CAAeH,KAAf,EAA8BI,IAA9B,EAAmE;AACjE,UAAMC,SAAS,GAAG,MAAM,KAAKP,cAAL,CAAoBK,QAApB,CAA6BH,KAA7B,EAAoCI,IAApC,CAAxB;AACA,WAAO,IAAIV,KAAJ,CAAU;AACfY,MAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIjB,IAAJ,CAASiB,IAAT,CAA5B;AAHQ,KAAV,CAAP;AAKD;;AAEDC,EAAAA,cAAc,GAAkB;AAC9B,WAAO,KAAKd,eAAL,CAAqBc,cAArB,EAAP;AACD;;AAED,QAAMC,QAAN,CAAeZ,KAAf,EAA8Ba,OAA9B,EAA+D;AAC7D,UAAMR,SAAS,GAAG,MAAM,KAAKP,cAAL,CAAoBc,QAApB,CAA6BZ,KAA7B,EAAoCa,OAApC,CAAxB;AACA,WAAO,IAAInB,KAAJ,CAAU;AACfY,MAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIjB,IAAJ,CAASiB,IAAT,CAA5B;AAHQ,KAAV,CAAP;AAKD;;AAED,QAAMI,SAAN,CAAgBd,KAAhB,EAAiD;AAC/C,UAAMe,MAAM,GAAG,MAAM,KAAKjB,cAAL,CAAoBgB,SAApB,CAA8Bd,KAA9B,CAArB;AACA,WAAOe,MAAM,CAACN,GAAP,CACLJ,SAAS,IACP,IAAIX,KAAJ,CAAU;AACRY,MAAAA,EAAE,EAAED,SAAS,CAACC,EADN;AAERC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFR;AAGRC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIjB,IAAJ,CAASiB,IAAT,CAA5B;AAHC,KAAV,CAFG,CAAP;AAQD;;AA9CkB;;AAiDrB,SAASf,QAAT","sourcesContent":["import { Card, Topic, User } from '@flashcards/core'\nimport { FirebaseService } from '../service/firebase/service'\nimport { GraphqlService } from '../service/graphql/service'\nimport { AddCardInput, AddCardUseCase } from './AddCard'\nimport { AddTopicInput, AddTopicUseCase } from './AddTopic'\nimport { GetCurrentUserUseCase } from './GetCurrentUser'\nimport { GetTopicUseCase } from './GetTopic'\nimport { GetTopicsUseCase } from './GetTopics'\n\nclass UseCases\n  implements\n    AddCardUseCase,\n    AddTopicUseCase,\n    GetCurrentUserUseCase,\n    GetTopicUseCase,\n    GetTopicsUseCase {\n  private readonly firebaseService: FirebaseService\n  private readonly graphqlService: GraphqlService\n\n  constructor(firebaseService: FirebaseService, graphqlService: GraphqlService) {\n    this.firebaseService = firebaseService\n    this.graphqlService = graphqlService\n  }\n\n  async addCard(token: string, input: AddCardInput): Promise<Card> {\n    const cardData = await this.graphqlService.addCard(token, input)\n    return new Card(cardData)\n  }\n\n  async addTopic(token: string, data: AddTopicInput): Promise<Topic> {\n    const topicData = await this.graphqlService.addTopic(token, data)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n\n  getCurrentUser(): Promise<User> {\n    return this.firebaseService.getCurrentUser()\n  }\n\n  async getTopic(token: string, topicId: string): Promise<Topic> {\n    const topicData = await this.graphqlService.getTopic(token, topicId)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n\n  async getTopics(token: string): Promise<Topic[]> {\n    const topics = await this.graphqlService.getTopics(token)\n    return topics.map(\n      topicData =>\n        new Topic({\n          id: topicData.id,\n          name: topicData.name,\n          cards: topicData.cards.map(card => new Card(card)),\n        }),\n    )\n  }\n}\n\nexport { UseCases }\n"]},"metadata":{},"sourceType":"module"}