{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar Observer = /*#__PURE__*/function () {\n  function Observer(emitter) {\n    _classCallCheck(this, Observer);\n\n    _defineProperty(this, \"subscriptions\", new Set());\n\n    _defineProperty(this, \"queue\", []);\n\n    _defineProperty(this, \"emitter\", void 0);\n\n    this.next = this.next.bind(this);\n    this.error = this.error.bind(this);\n    this.emitter = emitter;\n  }\n\n  _createClass(Observer, [{\n    key: \"next\",\n    value: function next(data) {\n      if (this.subscriptions.size) {\n        this.subscriptions.forEach(function (callback) {\n          callback(data);\n        });\n      } else {\n        this.queue.push(data);\n      }\n    }\n  }, {\n    key: \"error\",\n    value: function (_error) {\n      function error(_x) {\n        return _error.apply(this, arguments);\n      }\n\n      error.toString = function () {\n        return _error.toString();\n      };\n\n      return error;\n    }(function (error) {\n      console.error(error);\n    })\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      var _this = this;\n\n      this.subscriptions.add(callback);\n\n      if (this.queue.length) {\n        this.queue.forEach(function (data) {\n          return callback(data);\n        });\n        this.queue = [];\n      }\n\n      if (this.subscriptions.size === 1) {\n        this.emitter(this.next, this.error);\n      }\n\n      return function () {\n        _this.subscriptions[\"delete\"](callback);\n      };\n    }\n  }]);\n\n  return Observer;\n}();\n\nexport { Observer };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/usecase/Observer.ts"],"names":["Observer","emitter","Set","next","bind","error","data","subscriptions","size","forEach","callback","queue","push","console","add","length"],"mappings":";;;;IAEMA,Q;AAKJ,oBAAYC,OAAZ,EAA0F;AAAA;;AAAA,2CAJzC,IAAIC,GAAJ,EAIyC;;AAAA,mCAHpD,EAGoD;;AAAA;;AACxF,SAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKH,OAAL,GAAeA,OAAf;AACD;;;;yBAEYK,I,EAAgB;AAC3B,UAAI,KAAKC,aAAL,CAAmBC,IAAvB,EAA6B;AAC3B,aAAKD,aAAL,CAAmBE,OAAnB,CAA2B,UAAAC,QAAQ,EAAI;AACrCA,UAAAA,QAAQ,CAACJ,IAAD,CAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACL,aAAKK,KAAL,CAAWC,IAAX,CAAgBN,IAAhB;AACD;AACF;;;;;;;;;;;;;gBAEaD,K,EAAsB;AAClCQ,MAAAA,OAAO,CAACR,KAAR,CAAcA,KAAd;AACD,K;;;8BAESK,Q,EAA0C;AAAA;;AAClD,WAAKH,aAAL,CAAmBO,GAAnB,CAAuBJ,QAAvB;;AAEA,UAAI,KAAKC,KAAL,CAAWI,MAAf,EAAuB;AACrB,aAAKJ,KAAL,CAAWF,OAAX,CAAmB,UAAAH,IAAI;AAAA,iBAAII,QAAQ,CAACJ,IAAD,CAAZ;AAAA,SAAvB;AACA,aAAKK,KAAL,GAAa,EAAb;AACD;;AAED,UAAI,KAAKJ,aAAL,CAAmBC,IAAnB,KAA4B,CAAhC,EAAmC;AACjC,aAAKP,OAAL,CAAa,KAAKE,IAAlB,EAAwB,KAAKE,KAA7B;AACD;;AAED,aAAO,YAAM;AACX,QAAA,KAAI,CAACE,aAAL,WAA0BG,QAA1B;AACD,OAFD;AAGD;;;;;;AAGH,SAASV,QAAT","sourcesContent":["import { Observable } from './protocols'\n\nclass Observer<T> implements Observable<T> {\n  private subscriptions: Set<(data?: T) => void> = new Set()\n  private queue: Array<T | undefined> = []\n  private emitter: (next: (data?: T) => void, error: (error: unknown) => void) => void\n\n  constructor(emitter: (next: (data?: T) => void, error: (error: unknown) => void) => void) {\n    this.next = this.next.bind(this)\n    this.error = this.error.bind(this)\n    this.emitter = emitter\n  }\n\n  private next(data?: T): void {\n    if (this.subscriptions.size) {\n      this.subscriptions.forEach(callback => {\n        callback(data)\n      })\n    } else {\n      this.queue.push(data)\n    }\n  }\n\n  private error(error: unknown): void {\n    console.error(error)\n  }\n\n  subscribe(callback: (data?: T) => void): () => void {\n    this.subscriptions.add(callback)\n\n    if (this.queue.length) {\n      this.queue.forEach(data => callback(data))\n      this.queue = []\n    }\n\n    if (this.subscriptions.size === 1) {\n      this.emitter(this.next, this.error)\n    }\n\n    return () => {\n      this.subscriptions.delete(callback)\n    }\n  }\n}\n\nexport { Observer }\n"]},"metadata":{},"sourceType":"module"}