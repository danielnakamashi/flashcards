{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/home/Home.tsx\";\nimport { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { useAuth } from 'contexts/auth';\nimport { Pages } from 'models';\nimport { Header } from 'components/Header';\nimport { NewTopicForm } from 'components/NewTopicForm';\nimport { TopicsList } from 'components/TopicsList';\nimport { useUseCases } from 'hooks/useUseCases';\nimport { useStyles } from './Home.styles';\nimport { withAuth } from 'hocs/withAuth';\nimport { withRedirectToLogin } from 'hocs/withRedirectToLogin';\n\nconst Home = () => {\n  const {\n    user,\n    getToken\n  } = useAuth();\n  const styles = useStyles();\n  const {\n    0: topics,\n    1: setTopics\n  } = useState([]);\n  const {\n    0: token,\n    1: setToken\n  } = useState('');\n  const {\n    getTopics,\n    addTopic,\n    removeTopic\n  } = useUseCases();\n  useEffect(() => {\n    let isMounted = true;\n\n    (async () => {\n      const token = await getToken();\n\n      if (token && isMounted) {\n        console.log('token', token);\n        setToken(token);\n      }\n    })();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [user]);\n  useEffect(() => {\n    let isMounted = true;\n\n    (async () => {\n      if (token) {\n        const topics = await getTopics(token);\n\n        if (isMounted) {\n          setTopics(topics);\n        }\n      }\n    })();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(NewTopicForm, {\n          onTopicSubmitted: ({\n            name\n          }) => addTopic(user.token, {\n            name\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TopicsList, {\n          items: topics,\n          onItemRemoved: topicId => {\n            removeTopic(token, topicId);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nHome.displayName = Pages.Home;\nconst HomeDecorated = withAuth(withRedirectToLogin(Home));\nexport { HomeDecorated as Home };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/home/Home.tsx"],"names":["useState","useEffect","Grid","useAuth","Pages","Header","NewTopicForm","TopicsList","useUseCases","useStyles","withAuth","withRedirectToLogin","Home","user","getToken","styles","topics","setTopics","token","setToken","getTopics","addTopic","removeTopic","isMounted","console","log","container","name","topicId","displayName","HomeDecorated"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport { Topic } from '@flashcards/core'\nimport { useAuth } from 'contexts/auth'\nimport { Pages } from 'models'\nimport { Header } from 'components/Header'\nimport { NewTopicForm } from 'components/NewTopicForm'\nimport { TopicsList } from 'components/TopicsList'\nimport { useUseCases } from 'hooks/useUseCases'\nimport { useStyles } from './Home.styles'\nimport { withAuth } from 'hocs/withAuth'\nimport { withRedirectToLogin } from 'hocs/withRedirectToLogin'\n\nconst Home = () => {\n  const { user, getToken } = useAuth()\n  const styles = useStyles()\n  const [topics, setTopics] = useState<Topic[]>([])\n  const [token, setToken] = useState<string>('')\n  const { getTopics, addTopic, removeTopic } = useUseCases()\n\n  useEffect(() => {\n    let isMounted = true\n    ;(async () => {\n      const token = await getToken()\n      if (token && isMounted) {\n        console.log('token', token)\n        setToken(token)\n      }\n    })()\n\n    return () => {\n      isMounted = false\n    }\n  }, [user])\n\n  useEffect(() => {\n    let isMounted = true\n\n    ;(async () => {\n      if (token) {\n        const topics = await getTopics(token)\n        if (isMounted) {\n          setTopics(topics)\n        }\n      }\n    })()\n\n    return () => {\n      isMounted = false\n    }\n  }, [token])\n\n  return (\n    <>\n      <Header />\n      <Grid container direction=\"column\" className={styles.container}>\n        <Grid item>\n          <NewTopicForm onTopicSubmitted={({ name }) => addTopic(user.token, { name })} />\n        </Grid>\n        <Grid item>\n          <TopicsList\n            items={topics}\n            onItemRemoved={(topicId: string) => {\n              removeTopic(token, topicId)\n            }}\n          />\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nHome.displayName = Pages.Home\n\nconst HomeDecorated = withAuth(withRedirectToLogin(Home))\n\nexport { HomeDecorated as Home }\n"]},"metadata":{},"sourceType":"module"}