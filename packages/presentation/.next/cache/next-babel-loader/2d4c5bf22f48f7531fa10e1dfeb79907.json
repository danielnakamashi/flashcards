{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Card, Topic } from '@flashcards/core';\n\nvar AddTopic = /*#__PURE__*/function () {\n  function AddTopic(service) {\n    _classCallCheck(this, AddTopic);\n\n    _defineProperty(this, \"service\", void 0);\n\n    this.service = service;\n  }\n\n  _createClass(AddTopic, [{\n    key: \"addTopic\",\n    value: function () {\n      var _addTopic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, data) {\n        var topicData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.service.addTopic(token, data);\n\n              case 2:\n                topicData = _context.sent;\n                return _context.abrupt(\"return\", new Topic({\n                  id: topicData.id,\n                  name: topicData.name,\n                  cards: topicData.cards.map(function (card) {\n                    return new Card(card);\n                  })\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addTopic(_x, _x2) {\n        return _addTopic.apply(this, arguments);\n      }\n\n      return addTopic;\n    }()\n  }]);\n\n  return AddTopic;\n}();\n\nexport { AddTopic };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/main/AddTopic.ts"],"names":["Card","Topic","AddTopic","service","token","data","addTopic","topicData","id","name","cards","map","card"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;;IAGMC,Q;AAGJ,oBAAYC,OAAZ,EAAsC;AAAA;;AAAA;;AACpC,SAAKA,OAAL,GAAeA,OAAf;AACD;;;;;gGAEcC,K,EAAeC,I;;;;;;;uBACJ,KAAKF,OAAL,CAAaG,QAAb,CAAsBF,KAAtB,EAA6BC,IAA7B,C;;;AAAlBE,gBAAAA,S;iDACC,IAAIN,KAAJ,CAAU;AACfO,kBAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,kBAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,kBAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,2BAAI,IAAIZ,IAAJ,CAASY,IAAT,CAAJ;AAAA,mBAAxB;AAHQ,iBAAV,C;;;;;;;;;;;;;;;;;;;;;AAQX,SAASV,QAAT","sourcesContent":["import { Card, Topic } from '@flashcards/core'\nimport { AddTopicInput, AddTopicService, AddTopicUseCase } from '../usecase'\n\nclass AddTopic implements AddTopicUseCase {\n  private readonly service: AddTopicService\n\n  constructor(service: AddTopicService) {\n    this.service = service\n  }\n\n  async addTopic(token: string, data: AddTopicInput): Promise<Topic> {\n    const topicData = await this.service.addTopic(token, data)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n}\n\nexport { AddTopic }\n"]},"metadata":{},"sourceType":"module"}