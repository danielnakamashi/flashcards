{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { CardData, TopicData } from '@flashcards/usecase';\nimport { useToken } from '@/hooks/useToken';\nimport { useUseCases } from '@/hooks/useUseCases';\n\nfunction useTopic(topicId) {\n  _s();\n\n  var token = useToken();\n\n  var _useUseCases = useUseCases(),\n      getTopic = _useUseCases.getTopic;\n\n  var _useState = useState(),\n      topic = _useState[0],\n      setTopic = _useState[1];\n\n  useEffect(function () {\n    var isMounted = true;\n\n    if (token) {\n      getTopic(token, topicId).then(function (data) {\n        if (isMounted) {\n          setTopic(new TopicData({\n            id: data.id,\n            name: data.name,\n            cards: data.cards.map(function (card) {\n              return new CardData(card);\n            })\n          }));\n        }\n      });\n    }\n\n    return function () {\n      isMounted = false;\n    };\n  }, [token]);\n  return topic;\n}\n\n_s(useTopic, \"DOIkAN/u1paRjy27L+/fEeKA3nA=\", false, function () {\n  return [useToken, useUseCases];\n});\n\nexport { useTopic };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/hooks/useTopic.ts"],"names":["useState","useEffect","CardData","TopicData","useToken","useUseCases","useTopic","topicId","token","getTopic","topic","setTopic","isMounted","then","data","id","name","cards","map","card"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,qBAApC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,QAA4B,qBAA5B;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA0D;AAAA;;AACxD,MAAMC,KAAK,GAAGJ,QAAQ,EAAtB;;AADwD,qBAEnCC,WAAW,EAFwB;AAAA,MAEhDI,QAFgD,gBAEhDA,QAFgD;;AAAA,kBAG9BT,QAAQ,EAHsB;AAAA,MAGjDU,KAHiD;AAAA,MAG1CC,QAH0C;;AAKxDV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,SAAS,GAAG,IAAhB;;AAEA,QAAIJ,KAAJ,EAAW;AACTC,MAAAA,QAAQ,CAACD,KAAD,EAAQD,OAAR,CAAR,CAAyBM,IAAzB,CAA8B,UAAAC,IAAI,EAAI;AACpC,YAAIF,SAAJ,EAAe;AACbD,UAAAA,QAAQ,CACN,IAAIR,SAAJ,CAAc;AACZY,YAAAA,EAAE,EAAED,IAAI,CAACC,EADG;AAEZC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IAFC;AAGZC,YAAAA,KAAK,EAAEH,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI;AAAA,qBAAI,IAAIjB,QAAJ,CAAaiB,IAAb,CAAJ;AAAA,aAAnB;AAHK,WAAd,CADM,CAAR;AAOD;AACF,OAVD;AAWD;;AAED,WAAO,YAAM;AACXP,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GApBQ,EAoBN,CAACJ,KAAD,CApBM,CAAT;AAsBA,SAAOE,KAAP;AACD;;GA5BQJ,Q;UACOF,Q,EACOC,W;;;AA4BvB,SAASC,QAAT","sourcesContent":["import { useState, useEffect } from 'react'\nimport { CardData, TopicData } from '@flashcards/usecase'\nimport { useToken } from '@/hooks/useToken'\nimport { useUseCases } from '@/hooks/useUseCases'\n\nfunction useTopic(topicId: string): TopicData | undefined {\n  const token = useToken()\n  const { getTopic } = useUseCases()\n  const [topic, setTopic] = useState<TopicData | undefined>()\n\n  useEffect(() => {\n    let isMounted = true\n\n    if (token) {\n      getTopic(token, topicId).then(data => {\n        if (isMounted) {\n          setTopic(\n            new TopicData({\n              id: data.id,\n              name: data.name,\n              cards: data.cards.map(card => new CardData(card)),\n            }),\n          )\n        }\n      })\n    }\n\n    return () => {\n      isMounted = false\n    }\n  }, [token])\n\n  return topic\n}\n\nexport { useTopic }\n"]},"metadata":{},"sourceType":"module"}