{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, gql, InMemoryCache } from '@apollo/client';\nimport { CardData, TopicData, Observer } from '@flashcards/usecase';\n\nclass GraphqlService {\n  constructor(uri) {\n    _defineProperty(this, \"client\", void 0);\n\n    this.client = new ApolloClient({\n      uri,\n      cache: new InMemoryCache(),\n      connectToDevTools: true\n    });\n  }\n\n  async getTopics(token) {\n    const {\n      data\n    } = await this.client.query({\n      query: GraphqlService.queryTopics,\n      context: {\n        headers: {\n          authentication: token\n        }\n      },\n      fetchPolicy: 'no-cache'\n    });\n    return data.topics.map(topicData => new TopicData(topicData));\n  }\n\n  getTopicsObserver(token) {\n    return new Observer((next, error) => {\n      const observable = this.client.watchQuery({\n        query: GraphqlService.queryTopics,\n        context: {\n          headers: {\n            authentication: token\n          }\n        }\n      });\n      observable.subscribe({\n        next: ({\n          data\n        }) => {\n          next(data.topics.map(topicData => new TopicData(topicData)));\n        },\n        error\n      });\n    });\n  }\n\n  async getTopic(token, topicId) {\n    const {\n      data\n    } = await this.client.query({\n      query: GraphqlService.queryTopic,\n      variables: {\n        topicId\n      },\n      context: {\n        headers: {\n          authentication: token\n        }\n      },\n      fetchPolicy: 'no-cache'\n    });\n    return new TopicData({\n      id: data.topic.id,\n      name: data.topic.name,\n      cards: data.topic.cards.map(({\n        id,\n        question,\n        answer\n      }) => new CardData({\n        id,\n        front: question,\n        back: answer\n      }))\n    });\n  }\n\n  async addTopic(token, inputData) {\n    const context = {\n      headers: {\n        authentication: token\n      }\n    };\n    const {\n      data\n    } = await this.client.mutate({\n      mutation: GraphqlService.mutationAddTopic,\n      variables: {\n        name: inputData.name\n      },\n      context,\n      refetchQueries: [{\n        query: GraphqlService.queryTopics,\n        context\n      }]\n    });\n    return data ? new TopicData({\n      id: data.id,\n      name: data.name\n    }) : null;\n  }\n\n  async removeTopic(token, topicId) {\n    const context = {\n      headers: {\n        authentication: token\n      }\n    };\n    await this.client.mutate({\n      mutation: GraphqlService.mutationRemoveTopic,\n      variables: {\n        topicId\n      },\n      context,\n      refetchQueries: [{\n        query: GraphqlService.queryTopics,\n        context\n      }]\n    });\n    return true;\n  }\n\n  async addCard(token, inputData) {\n    const context = {\n      headers: {\n        authentication: token\n      }\n    };\n    const {\n      data\n    } = await this.client.mutate({\n      mutation: GraphqlService.mutationAddCard,\n      variables: inputData,\n      context,\n      refetchQueries: [{\n        query: GraphqlService.queryTopic,\n        variables: {\n          topicId: inputData.topicId\n        },\n        context\n      }]\n    });\n    return new CardData({\n      id: data.id,\n      front: data.question,\n      back: data.answer\n    });\n  }\n\n}\n\n_defineProperty(GraphqlService, \"queryTopics\", gql`\n    query Topics {\n      topics {\n        id\n        name\n      }\n    }\n  `);\n\n_defineProperty(GraphqlService, \"queryTopic\", gql`\n    query Topic($topicId: String!) {\n      topic(topicId: $topicId) {\n        id\n        name\n        cards {\n          id\n          question\n          answer\n        }\n      }\n    }\n  `);\n\n_defineProperty(GraphqlService, \"mutationAddTopic\", gql`\n    mutation AddTopic($name: String!) {\n      addTopic(name: $name) {\n        id\n        name\n      }\n    }\n  `);\n\n_defineProperty(GraphqlService, \"mutationRemoveTopic\", gql`\n    mutation RemoveTopic($topicId: String!) {\n      removeTopic(topicId: $topicId)\n    }\n  `);\n\n_defineProperty(GraphqlService, \"mutationAddCard\", gql`\n    mutation AddCard($topicId: String!, $question: String!, $answer: String!) {\n      addCard(topicId: $topicId, card: { question: $question, answer: $answer }) {\n        id\n        question\n        answer\n      }\n    }\n  `);\n\nexport { GraphqlService };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/service/src/graphql/index.ts"],"names":["ApolloClient","gql","InMemoryCache","CardData","TopicData","Observer","GraphqlService","constructor","uri","client","cache","connectToDevTools","getTopics","token","data","query","queryTopics","context","headers","authentication","fetchPolicy","topics","map","topicData","getTopicsObserver","next","error","observable","watchQuery","subscribe","getTopic","topicId","queryTopic","variables","id","topic","name","cards","question","answer","front","back","addTopic","inputData","mutate","mutation","mutationAddTopic","refetchQueries","removeTopic","mutationRemoveTopic","addCard","mutationAddCard"],"mappings":"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","sourcesContent":["import { ApolloClient, NormalizedCacheObject, gql, InMemoryCache } from '@apollo/client'\nimport {\n  AddTopicServiceParam,\n  AddCardServiceInput,\n  Observable,\n  CardData,\n  TopicData,\n  Observer,\n} from '@flashcards/usecase'\nimport { Topic as TopicDB } from './entities/Topic'\nimport { RepositoryService } from '../RepositoryService'\n\nclass GraphqlService implements RepositoryService {\n  private static readonly queryTopics = gql`\n    query Topics {\n      topics {\n        id\n        name\n      }\n    }\n  `\n  private static readonly queryTopic = gql`\n    query Topic($topicId: String!) {\n      topic(topicId: $topicId) {\n        id\n        name\n        cards {\n          id\n          question\n          answer\n        }\n      }\n    }\n  `\n  private static readonly mutationAddTopic = gql`\n    mutation AddTopic($name: String!) {\n      addTopic(name: $name) {\n        id\n        name\n      }\n    }\n  `\n  private static readonly mutationRemoveTopic = gql`\n    mutation RemoveTopic($topicId: String!) {\n      removeTopic(topicId: $topicId)\n    }\n  `\n  private static readonly mutationAddCard = gql`\n    mutation AddCard($topicId: String!, $question: String!, $answer: String!) {\n      addCard(topicId: $topicId, card: { question: $question, answer: $answer }) {\n        id\n        question\n        answer\n      }\n    }\n  `\n\n  private readonly client: ApolloClient<NormalizedCacheObject>\n\n  constructor(uri: string) {\n    this.client = new ApolloClient({\n      uri,\n      cache: new InMemoryCache(),\n      connectToDevTools: true,\n    })\n  }\n\n  async getTopics(token: string): Promise<TopicData[]> {\n    const { data } = await this.client.query<{ topics: TopicData[] }>({\n      query: GraphqlService.queryTopics,\n      context: {\n        headers: {\n          authentication: token,\n        },\n      },\n      fetchPolicy: 'no-cache',\n    })\n\n    return data.topics.map(topicData => new TopicData(topicData))\n  }\n\n  getTopicsObserver(token: string): Observable<TopicData[]> {\n    return new Observer((next, error) => {\n      const observable = this.client.watchQuery<{ topics: TopicData[] }>({\n        query: GraphqlService.queryTopics,\n        context: {\n          headers: {\n            authentication: token,\n          },\n        },\n      })\n      observable.subscribe({\n        next: ({ data }) => {\n          next(data.topics.map(topicData => new TopicData(topicData)))\n        },\n        error,\n      })\n    })\n  }\n\n  async getTopic(token: string, topicId: string): Promise<TopicData> {\n    const { data } = await this.client.query<{ topic: TopicDB }>({\n      query: GraphqlService.queryTopic,\n      variables: {\n        topicId,\n      },\n      context: {\n        headers: {\n          authentication: token,\n        },\n      },\n      fetchPolicy: 'no-cache',\n    })\n\n    return new TopicData({\n      id: data.topic.id,\n      name: data.topic.name,\n      cards: data.topic.cards.map(\n        ({ id, question, answer }) => new CardData({ id, front: question, back: answer }),\n      ),\n    })\n  }\n\n  async addTopic(token: string, inputData: AddTopicServiceParam): Promise<TopicData | null> {\n    const context = {\n      headers: {\n        authentication: token,\n      },\n    }\n    const { data } = await this.client.mutate<{ id: string; name: string }>({\n      mutation: GraphqlService.mutationAddTopic,\n      variables: {\n        name: inputData.name,\n      },\n      context,\n      refetchQueries: [\n        {\n          query: GraphqlService.queryTopics,\n          context,\n        },\n      ],\n    })\n\n    return data ? new TopicData({ id: data.id, name: data.name }) : null\n  }\n\n  async removeTopic(token: string, topicId: string): Promise<boolean> {\n    const context = {\n      headers: {\n        authentication: token,\n      },\n    }\n    await this.client.mutate({\n      mutation: GraphqlService.mutationRemoveTopic,\n      variables: {\n        topicId,\n      },\n      context,\n      refetchQueries: [\n        {\n          query: GraphqlService.queryTopics,\n          context,\n        },\n      ],\n    })\n\n    return true\n  }\n\n  async addCard(token: string, inputData: AddCardServiceInput): Promise<CardData> {\n    const context = {\n      headers: {\n        authentication: token,\n      },\n    }\n    const { data } = await this.client.mutate<{ id: string; question: string; answer: string }>({\n      mutation: GraphqlService.mutationAddCard,\n      variables: inputData,\n      context,\n      refetchQueries: [\n        {\n          query: GraphqlService.queryTopic,\n          variables: {\n            topicId: inputData.topicId,\n          },\n          context,\n        },\n      ],\n    })\n\n    return new CardData({ id: data.id, front: data.question, back: data.answer })\n  }\n}\n\nexport { GraphqlService }\n"]},"metadata":{},"sourceType":"module"}