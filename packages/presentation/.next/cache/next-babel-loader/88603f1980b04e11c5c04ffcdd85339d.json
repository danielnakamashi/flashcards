{"ast":null,"code":"import { Card, Topic } from '@flashcards/core';\nimport { Observer } from '../../service/Observer';\n\nfunction createGetTopicsObserver(service) {\n  return function (token) {\n    return new Observer(next => {\n      const observer = service.getTopicsObserver(token);\n      observer.subscribe(topicsData => {\n        console.log(topicsData);\n        next(topicsData.map(topicData => new Topic({\n          id: topicData.id,\n          name: topicData.name,\n          cards: topicData.cards.map(card => new Card(card))\n        })));\n      });\n    });\n  };\n}\n\nexport { createGetTopicsObserver };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/usecase/GetTopicsObserver/createGetTopicsObserver.ts"],"names":["Card","Topic","Observer","createGetTopicsObserver","service","token","next","observer","getTopicsObserver","subscribe","topicsData","console","log","map","topicData","id","name","cards","card"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAKA,SAASC,uBAAT,CAAiCC,OAAjC,EAA8F;AAC5F,SAAO,UAAUC,KAAV,EAA8C;AACnD,WAAO,IAAIH,QAAJ,CAAsBI,IAAI,IAAI;AACnC,YAAMC,QAAQ,GAAGH,OAAO,CAACI,iBAAR,CAA0BH,KAA1B,CAAjB;AACAE,MAAAA,QAAQ,CAACE,SAAT,CAAmBC,UAAU,IAAI;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAJ,QAAAA,IAAI,CACFI,UAAU,CAACG,GAAX,CACEC,SAAS,IACP,IAAIb,KAAJ,CAAU;AACRc,UAAAA,EAAE,EAAED,SAAS,CAACC,EADN;AAERC,UAAAA,IAAI,EAAEF,SAAS,CAACE,IAFR;AAGRC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBJ,GAAhB,CAAoBK,IAAI,IAAI,IAAIlB,IAAJ,CAASkB,IAAT,CAA5B;AAHC,SAAV,CAFJ,CADE,CAAJ;AAUD,OAZD;AAaD,KAfM,CAAP;AAgBD,GAjBD;AAkBD;;AAED,SAASf,uBAAT","sourcesContent":["import { Card, Topic } from '@flashcards/core'\nimport { Observer } from '../../service/Observer'\nimport { Observable } from '../protocols'\nimport { GetTopicsObserverService } from './GetTopicsObserverService'\nimport { GetTopicsObserverUseCase } from './GetTopicsObserverUseCase'\n\nfunction createGetTopicsObserver(service: GetTopicsObserverService): GetTopicsObserverUseCase {\n  return function (token: string): Observable<Topic[]> {\n    return new Observer<Topic[]>(next => {\n      const observer = service.getTopicsObserver(token)\n      observer.subscribe(topicsData => {\n        console.log(topicsData)\n        next(\n          topicsData.map(\n            topicData =>\n              new Topic({\n                id: topicData.id,\n                name: topicData.name,\n                cards: topicData.cards.map(card => new Card(card)),\n              }),\n          ),\n        )\n      })\n    })\n  }\n}\n\nexport { createGetTopicsObserver }\n"]},"metadata":{},"sourceType":"module"}