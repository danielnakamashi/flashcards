{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, Topic } from '@flashcards/core';\n\nclass GetTopics {\n  constructor(service) {\n    _defineProperty(this, \"service\", void 0);\n\n    this.service = service;\n  }\n\n  async getTopics(token) {\n    const topics = await this.service.getTopics(token);\n    return topics.map(topicData => new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    }));\n  }\n\n}\n\nexport { GetTopics };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/main/GetTopics.ts"],"names":["Card","Topic","GetTopics","constructor","service","getTopics","token","topics","map","topicData","id","name","cards","card"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;;AAGA,MAAMC,SAAN,CAA4C;AAG1CC,EAAAA,WAAW,CAACC,OAAD,EAA4B;AAAA;;AACrC,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAED,QAAMC,SAAN,CAAgBC,KAAhB,EAAiD;AAC/C,UAAMC,MAAM,GAAG,MAAM,KAAKH,OAAL,CAAaC,SAAb,CAAuBC,KAAvB,CAArB;AACA,WAAOC,MAAM,CAACC,GAAP,CACLC,SAAS,IACP,IAAIR,KAAJ,CAAU;AACRS,MAAAA,EAAE,EAAED,SAAS,CAACC,EADN;AAERC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFR;AAGRC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBJ,GAAhB,CAAoBK,IAAI,IAAI,IAAIb,IAAJ,CAASa,IAAT,CAA5B;AAHC,KAAV,CAFG,CAAP;AAQD;;AAjByC;;AAoB5C,SAASX,SAAT","sourcesContent":["import { Card, Topic } from '@flashcards/core'\nimport { GetTopicsService, GetTopicsUseCase } from '../usecase'\n\nclass GetTopics implements GetTopicsUseCase {\n  private readonly service: GetTopicsService\n\n  constructor(service: GetTopicsService) {\n    this.service = service\n  }\n\n  async getTopics(token: string): Promise<Topic[]> {\n    const topics = await this.service.getTopics(token)\n    return topics.map(\n      topicData =>\n        new Topic({\n          id: topicData.id,\n          name: topicData.name,\n          cards: topicData.cards.map(card => new Card(card)),\n        }),\n    )\n  }\n}\n\nexport { GetTopics }\n"]},"metadata":{},"sourceType":"module"}