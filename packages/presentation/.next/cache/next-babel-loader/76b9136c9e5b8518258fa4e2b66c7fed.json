{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from '@apollo/client';\nimport { TopicData } from '../../usecase';\nimport { Observer } from '../Observer';\n\nclass GraphqlService {\n  constructor(client) {\n    this.client = client;\n  }\n\n  async getTopics(token) {\n    const {\n      data\n    } = await this.client.query({\n      query: GraphqlService.queryTopics,\n      context: {\n        headers: {\n          authentication: token\n        }\n      },\n      fetchPolicy: 'no-cache'\n    });\n    return data.topics.map(topicData => new TopicData(topicData));\n  }\n\n  getTopicsObserver(token) {\n    return new Observer((next, error) => {\n      const observable = this.client.watchQuery({\n        query: GraphqlService.queryTopics,\n        context: {\n          headers: {\n            authentication: token\n          }\n        }\n      });\n      observable.subscribe({\n        next: ({\n          data\n        }) => {\n          next(data.topics.map(topicData => new TopicData(topicData)));\n        },\n        error\n      });\n    });\n  }\n\n  async getTopic(token, topicId) {\n    const {\n      data\n    } = await this.client.query({\n      query: GraphqlService.queryTopic,\n      variables: {\n        topicId\n      },\n      context: {\n        headers: {\n          authentication: token\n        }\n      },\n      fetchPolicy: 'no-cache'\n    });\n\n    const a = _objectSpread({}, data.topic);\n\n    return new TopicData(_objectSpread({}, data.topic));\n  }\n\n  async addTopic(token, inputData) {\n    const context = {\n      headers: {\n        authentication: token\n      }\n    };\n    const {\n      data\n    } = await this.client.mutate({\n      mutation: GraphqlService.mutationAddTopic,\n      variables: {\n        name: inputData.name\n      },\n      context,\n      refetchQueries: [{\n        query: GraphqlService.queryTopics,\n        context\n      }]\n    });\n    return data ? new TopicData(_objectSpread({}, data)) : null;\n  }\n\n  async removeTopic(token, topicId) {\n    const context = {\n      headers: {\n        authentication: token\n      }\n    };\n    await this.client.mutate({\n      mutation: GraphqlService.mutationRemoveTopic,\n      variables: {\n        topicId\n      },\n      context,\n      refetchQueries: [{\n        query: GraphqlService.queryTopics,\n        context\n      }]\n    });\n    return true;\n  }\n\n}\n\n_defineProperty(GraphqlService, \"queryTopics\", gql`\n    query Topics {\n      topics {\n        id\n        name\n      }\n    }\n  `);\n\n_defineProperty(GraphqlService, \"queryTopic\", gql`\n    query Topic($topicId: String!) {\n      topic(topicId: $topicId) {\n        name\n        cards {\n          id\n          question\n          answer\n        }\n      }\n    }\n  `);\n\n_defineProperty(GraphqlService, \"mutationAddTopic\", gql`\n    mutation AddTopic($name: String!) {\n      addTopic(name: $name) {\n        id\n        name\n      }\n    }\n  `);\n\n_defineProperty(GraphqlService, \"mutationRemoveTopic\", gql`\n    mutation RemoveTopic($topicId: String!) {\n      removeTopic(topicId: $topicId)\n    }\n  `);\n\nexport { GraphqlService };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/service/graphql/service.ts"],"names":["gql","TopicData","Observer","GraphqlService","constructor","client","getTopics","token","data","query","queryTopics","context","headers","authentication","fetchPolicy","topics","map","topicData","getTopicsObserver","next","error","observable","watchQuery","subscribe","getTopic","topicId","queryTopic","variables","a","topic","addTopic","inputData","mutate","mutation","mutationAddTopic","name","refetchQueries","removeTopic","mutationRemoveTopic"],"mappings":"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","sourcesContent":["import { ApolloClient, NormalizedCacheObject, gql } from '@apollo/client'\nimport { RemoveTopicService } from '../../usecase/RemoveTopic'\nimport { AddTopicService, GetTopicsService, TopicData, AddTopicServiceParam } from '../../usecase'\nimport { Observable } from '../../usecase/protocols'\nimport { Observer } from '../Observer'\n\nclass GraphqlService implements GetTopicsService, AddTopicService, RemoveTopicService {\n  private static readonly queryTopics = gql`\n    query Topics {\n      topics {\n        id\n        name\n      }\n    }\n  `\n  private static readonly queryTopic = gql`\n    query Topic($topicId: String!) {\n      topic(topicId: $topicId) {\n        name\n        cards {\n          id\n          question\n          answer\n        }\n      }\n    }\n  `\n  private static readonly mutationAddTopic = gql`\n    mutation AddTopic($name: String!) {\n      addTopic(name: $name) {\n        id\n        name\n      }\n    }\n  `\n  private static readonly mutationRemoveTopic = gql`\n    mutation RemoveTopic($topicId: String!) {\n      removeTopic(topicId: $topicId)\n    }\n  `\n\n  constructor(private readonly client: ApolloClient<NormalizedCacheObject>) {}\n\n  async getTopics(token: string): Promise<TopicData[]> {\n    const { data } = await this.client.query<{ topics: TopicData[] }>({\n      query: GraphqlService.queryTopics,\n      context: {\n        headers: {\n          authentication: token,\n        },\n      },\n      fetchPolicy: 'no-cache',\n    })\n\n    return data.topics.map(topicData => new TopicData(topicData))\n  }\n\n  getTopicsObserver(token: string): Observable<TopicData[]> {\n    return new Observer((next, error) => {\n      const observable = this.client.watchQuery<{ topics: TopicData[] }>({\n        query: GraphqlService.queryTopics,\n        context: {\n          headers: {\n            authentication: token,\n          },\n        },\n      })\n      observable.subscribe({\n        next: ({ data }) => {\n          next(data.topics.map(topicData => new TopicData(topicData)))\n        },\n        error,\n      })\n    })\n  }\n\n  async getTopic(token: string, topicId: string): Promise<TopicData> {\n    const { data } = await this.client.query<{ topic: TopicData }>({\n      query: GraphqlService.queryTopic,\n      variables: {\n        topicId,\n      },\n      context: {\n        headers: {\n          authentication: token,\n        },\n      },\n      fetchPolicy: 'no-cache',\n    })\n\n    const a = { ...data.topic }\n    return new TopicData({ ...data.topic })\n  }\n\n  async addTopic(token: string, inputData: AddTopicServiceParam): Promise<TopicData | null> {\n    const context = {\n      headers: {\n        authentication: token,\n      },\n    }\n    const { data } = await this.client.mutate<{ id: string; name: string }>({\n      mutation: GraphqlService.mutationAddTopic,\n      variables: {\n        name: inputData.name,\n      },\n      context,\n      refetchQueries: [\n        {\n          query: GraphqlService.queryTopics,\n          context,\n        },\n      ],\n    })\n\n    return data ? new TopicData({ ...data }) : null\n  }\n\n  async removeTopic(token: string, topicId: string): Promise<boolean> {\n    const context = {\n      headers: {\n        authentication: token,\n      },\n    }\n    await this.client.mutate({\n      mutation: GraphqlService.mutationRemoveTopic,\n      variables: {\n        topicId,\n      },\n      context,\n      refetchQueries: [\n        {\n          query: GraphqlService.queryTopics,\n          context,\n        },\n      ],\n    })\n\n    return true\n  }\n}\n\nexport { GraphqlService }\n"]},"metadata":{},"sourceType":"module"}