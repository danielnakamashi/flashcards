{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, Topic } from '@flashcards/core';\n\nclass GetTopic {\n  constructor(service) {\n    _defineProperty(this, \"service\", void 0);\n\n    this.service = service;\n  }\n\n  async getTopic(token, topicId) {\n    const topicData = await this.service.getTopic(token, topicId);\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    });\n  }\n\n}\n\nexport { GetTopic };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/main/GetTopic.ts"],"names":["Card","Topic","GetTopic","constructor","service","getTopic","token","topicId","topicData","id","name","cards","map","card"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;;AAGA,MAAMC,QAAN,CAA0C;AAGxCC,EAAAA,WAAW,CAACC,OAAD,EAA2B;AAAA;;AACpC,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAED,QAAMC,QAAN,CAAeC,KAAf,EAA8BC,OAA9B,EAA+D;AAC7D,UAAMC,SAAS,GAAG,MAAM,KAAKJ,OAAL,CAAaC,QAAb,CAAsBC,KAAtB,EAA6BC,OAA7B,CAAxB;AACA,WAAO,IAAIN,KAAJ,CAAU;AACfQ,MAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIb,IAAJ,CAASa,IAAT,CAA5B;AAHQ,KAAV,CAAP;AAKD;;AAduC;;AAiB1C,SAASX,QAAT","sourcesContent":["import { Card, Topic } from '@flashcards/core'\nimport { GetTopicService, GetTopicUseCase } from '../usecase/GetTopic'\n\nclass GetTopic implements GetTopicUseCase {\n  private readonly service: GetTopicService\n\n  constructor(service: GetTopicService) {\n    this.service = service\n  }\n\n  async getTopic(token: string, topicId: string): Promise<Topic> {\n    const topicData = await this.service.getTopic(token, topicId)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n}\n\nexport { GetTopic }\n"]},"metadata":{},"sourceType":"module"}