{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { factory } from '@flashcards/client';\nvar userObserver = factory.createUserObserver();\nvar getUserToken = factory.createGetUserToken();\nvar initialState = {\n  user: null,\n  loading: true,\n  getToken: getUserToken\n};\nvar AuthContext = /*#__PURE__*/React.createContext(initialState);\n\nvar reducer = function reducer(state, action) {\n  if (action.type === 'loaded') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loading: false,\n      user: action.payload\n    });\n  }\n\n  return state;\n};\n\nvar AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _React$useReducer = React.useReducer(reducer, initialState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var isMounted = true;\n    userObserver(function (user) {\n      if (isMounted) {\n        dispatch({\n          type: 'loaded',\n          payload: user\n        });\n      }\n    });\n    return function () {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: state,\n    children: children\n  });\n};\n\nvar useAuth = function useAuth() {\n  return React.useContext(AuthContext);\n};\n\nexport { AuthProvider, useAuth };","map":null,"metadata":{},"sourceType":"module"}