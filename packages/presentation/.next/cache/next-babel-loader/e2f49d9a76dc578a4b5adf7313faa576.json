{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, Topic } from '@flashcards/core';\nimport { Observer } from '../service/Observer';\n\nclass UseCases {\n  constructor(firebaseService, graphqlService) {\n    _defineProperty(this, \"firebaseService\", void 0);\n\n    _defineProperty(this, \"graphqlService\", void 0);\n\n    this.firebaseService = firebaseService;\n    this.graphqlService = graphqlService;\n  }\n\n  async addCard(token, input) {\n    const cardData = await this.graphqlService.addCard(token, input);\n    return new Card(cardData);\n  }\n\n  async addTopic(token, data) {\n    const topicData = await this.graphqlService.addTopic(token, data);\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    });\n  }\n\n  getCurrentUser() {\n    return this.firebaseService.getCurrentUser();\n  }\n\n  async getTopic(token, topicId) {\n    const topicData = await this.graphqlService.getTopic(token, topicId);\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    });\n  }\n\n  async getTopics(token) {\n    const topics = await this.graphqlService.getTopics(token);\n    return topics.map(topicData => new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    }));\n  }\n\n  getTopicsObserver(token) {\n    return new Observer(next => {\n      const observer = this.graphqlService.getTopicsObserver(token);\n      observer.subscribe(topicsData => {\n        next(topicsData.map(topicData => new Topic({\n          id: topicData.id,\n          name: topicData.name,\n          cards: topicData.cards.map(card => new Card(card))\n        })));\n      });\n    });\n  }\n\n  getUserToken() {\n    return this.firebaseService.getUserToken();\n  }\n\n  removeTopic(token, topicId) {\n    return this.service.removeTopic(token, topicId);\n  }\n\n}\n\nexport { UseCases };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/usecase/index.ts"],"names":["Card","Topic","Observer","UseCases","constructor","firebaseService","graphqlService","addCard","token","input","cardData","addTopic","data","topicData","id","name","cards","map","card","getCurrentUser","getTopic","topicId","getTopics","topics","getTopicsObserver","next","observer","subscribe","topicsData","getUserToken","removeTopic","service"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,KAAf,QAAkC,kBAAlC;AAGA,SAASC,QAAT,QAAyB,qBAAzB;;AAWA,MAAMC,QAAN,CASuB;AAIrBC,EAAAA,WAAW,CAACC,eAAD,EAAmCC,cAAnC,EAAmE;AAAA;;AAAA;;AAC5E,SAAKD,eAAL,GAAuBA,eAAvB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACD;;AAED,QAAMC,OAAN,CAAcC,KAAd,EAA6BC,KAA7B,EAAiE;AAC/D,UAAMC,QAAQ,GAAG,MAAM,KAAKJ,cAAL,CAAoBC,OAApB,CAA4BC,KAA5B,EAAmCC,KAAnC,CAAvB;AACA,WAAO,IAAIT,IAAJ,CAASU,QAAT,CAAP;AACD;;AAED,QAAMC,QAAN,CAAeH,KAAf,EAA8BI,IAA9B,EAAmE;AACjE,UAAMC,SAAS,GAAG,MAAM,KAAKP,cAAL,CAAoBK,QAApB,CAA6BH,KAA7B,EAAoCI,IAApC,CAAxB;AACA,WAAO,IAAIX,KAAJ,CAAU;AACfa,MAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIlB,IAAJ,CAASkB,IAAT,CAA5B;AAHQ,KAAV,CAAP;AAKD;;AAEDC,EAAAA,cAAc,GAAkB;AAC9B,WAAO,KAAKd,eAAL,CAAqBc,cAArB,EAAP;AACD;;AAED,QAAMC,QAAN,CAAeZ,KAAf,EAA8Ba,OAA9B,EAA+D;AAC7D,UAAMR,SAAS,GAAG,MAAM,KAAKP,cAAL,CAAoBc,QAApB,CAA6BZ,KAA7B,EAAoCa,OAApC,CAAxB;AACA,WAAO,IAAIpB,KAAJ,CAAU;AACfa,MAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIlB,IAAJ,CAASkB,IAAT,CAA5B;AAHQ,KAAV,CAAP;AAKD;;AAED,QAAMI,SAAN,CAAgBd,KAAhB,EAAiD;AAC/C,UAAMe,MAAM,GAAG,MAAM,KAAKjB,cAAL,CAAoBgB,SAApB,CAA8Bd,KAA9B,CAArB;AACA,WAAOe,MAAM,CAACN,GAAP,CACLJ,SAAS,IACP,IAAIZ,KAAJ,CAAU;AACRa,MAAAA,EAAE,EAAED,SAAS,CAACC,EADN;AAERC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFR;AAGRC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIlB,IAAJ,CAASkB,IAAT,CAA5B;AAHC,KAAV,CAFG,CAAP;AAQD;;AAEDM,EAAAA,iBAAiB,CAAChB,KAAD,EAAqC;AACpD,WAAO,IAAIN,QAAJ,CAAauB,IAAI,IAAI;AAC1B,YAAMC,QAAQ,GAAG,KAAKpB,cAAL,CAAoBkB,iBAApB,CAAsChB,KAAtC,CAAjB;AACAkB,MAAAA,QAAQ,CAACC,SAAT,CAAmBC,UAAU,IAAI;AAC/BH,QAAAA,IAAI,CACFG,UAAU,CAACX,GAAX,CACEJ,SAAS,IACP,IAAIZ,KAAJ,CAAU;AACRa,UAAAA,EAAE,EAAED,SAAS,CAACC,EADN;AAERC,UAAAA,IAAI,EAAEF,SAAS,CAACE,IAFR;AAGRC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIlB,IAAJ,CAASkB,IAAT,CAA5B;AAHC,SAAV,CAFJ,CADE,CAAJ;AAUD,OAXD;AAYD,KAdM,CAAP;AAeD;;AAEDW,EAAAA,YAAY,GAAoB;AAC9B,WAAO,KAAKxB,eAAL,CAAqBwB,YAArB,EAAP;AACD;;AAEDC,EAAAA,WAAW,CAACtB,KAAD,EAAgBa,OAAhB,EAAmD;AAC5D,WAAO,KAAKU,OAAL,CAAaD,WAAb,CAAyBtB,KAAzB,EAAgCa,OAAhC,CAAP;AACD;;AAxEoB;;AA2EvB,SAASlB,QAAT","sourcesContent":["import { Card, Topic, User } from '@flashcards/core'\nimport { FirebaseService } from '../service/firebase/service'\nimport { GraphqlService } from '../service/graphql/service'\nimport { Observer } from '../service/Observer'\nimport { AddCardInput, AddCardUseCase } from './AddCard'\nimport { AddTopicInput, AddTopicUseCase } from './AddTopic'\nimport { GetCurrentUserUseCase } from './GetCurrentUser'\nimport { GetTopicUseCase } from './GetTopic'\nimport { GetTopicsUseCase } from './GetTopics'\nimport { GetTopicsObserverUseCase } from './GetTopicsObserver'\nimport { GetUserTokenUseCase } from './GetUserToken'\nimport { Observable } from './protocols'\nimport { RemoveTopicUseCase } from './RemoveTopic'\n\nclass UseCases\n  implements\n    AddCardUseCase,\n    AddTopicUseCase,\n    GetCurrentUserUseCase,\n    GetTopicUseCase,\n    GetTopicsUseCase,\n    GetTopicsObserverUseCase,\n    GetUserTokenUseCase,\n    RemoveTopicUseCase {\n  private readonly firebaseService: FirebaseService\n  private readonly graphqlService: GraphqlService\n\n  constructor(firebaseService: FirebaseService, graphqlService: GraphqlService) {\n    this.firebaseService = firebaseService\n    this.graphqlService = graphqlService\n  }\n\n  async addCard(token: string, input: AddCardInput): Promise<Card> {\n    const cardData = await this.graphqlService.addCard(token, input)\n    return new Card(cardData)\n  }\n\n  async addTopic(token: string, data: AddTopicInput): Promise<Topic> {\n    const topicData = await this.graphqlService.addTopic(token, data)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n\n  getCurrentUser(): Promise<User> {\n    return this.firebaseService.getCurrentUser()\n  }\n\n  async getTopic(token: string, topicId: string): Promise<Topic> {\n    const topicData = await this.graphqlService.getTopic(token, topicId)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n\n  async getTopics(token: string): Promise<Topic[]> {\n    const topics = await this.graphqlService.getTopics(token)\n    return topics.map(\n      topicData =>\n        new Topic({\n          id: topicData.id,\n          name: topicData.name,\n          cards: topicData.cards.map(card => new Card(card)),\n        }),\n    )\n  }\n\n  getTopicsObserver(token: string): Observable<Topic[]> {\n    return new Observer(next => {\n      const observer = this.graphqlService.getTopicsObserver(token)\n      observer.subscribe(topicsData => {\n        next(\n          topicsData.map(\n            topicData =>\n              new Topic({\n                id: topicData.id,\n                name: topicData.name,\n                cards: topicData.cards.map(card => new Card(card)),\n              }),\n          ),\n        )\n      })\n    })\n  }\n\n  getUserToken(): Promise<string> {\n    return this.firebaseService.getUserToken()\n  }\n\n  removeTopic(token: string, topicId: string): Promise<boolean> {\n    return this.service.removeTopic(token, topicId)\n  }\n}\n\nexport { UseCases }\n"]},"metadata":{},"sourceType":"module"}