{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/components/NewCardForm/NewCardForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nvar NewCardForm = function NewCardForm(_ref) {\n  _s();\n\n  var _errors$question, _errors$answer;\n\n  var onAdd = _ref.onAdd;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset,\n      register = _useForm.register,\n      errors = _useForm.errors;\n\n  var questionRef = React.useRef();\n\n  var onSubmit = function onSubmit(_ref2) {\n    var _questionRef$current;\n\n    var question = _ref2.question,\n        answer = _ref2.answer;\n    onAdd(question, answer);\n    reset();\n    (_questionRef$current = questionRef.current) === null || _questionRef$current === void 0 ? void 0 : _questionRef$current.focus();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    \"data-testid\": \"new-card-form\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        flexGrow: 1,\n        pr: {\n          xs: 0,\n          sm: 1\n        },\n        width: {\n          xs: 1,\n          sm: 1 / 2,\n          md: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"question\",\n          defaultValue: \"\",\n          inputRef: function inputRef(element) {\n            register(element, {\n              required: 'Provide a Question'\n            });\n            questionRef.current = element;\n          },\n          helperText: (_errors$question = errors.question) === null || _errors$question === void 0 ? void 0 : _errors$question.message,\n          error: Boolean(errors.question),\n          label: \"Question\",\n          InputLabelProps: {\n            htmlFor: 'new-card-form-question'\n          },\n          InputProps: {\n            id: 'new-card-form-question'\n          },\n          variant: \"outlined\",\n          fullWidth: true,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Box, {\n        flexGrow: 1,\n        pl: {\n          xs: 0,\n          sm: 1\n        },\n        pr: {\n          md: 1\n        },\n        width: {\n          xs: 1,\n          sm: 1 / 2,\n          md: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"answer\",\n          defaultValue: \"\",\n          inputRef: register({\n            required: 'Provide an Answer'\n          }),\n          helperText: (_errors$answer = errors.answer) === null || _errors$answer === void 0 ? void 0 : _errors$answer.message,\n          error: Boolean(errors.answer),\n          label: \"Answer\",\n          InputLabelProps: {\n            htmlFor: 'new-card-form-answer'\n          },\n          InputProps: {\n            id: 'new-card-form-answer'\n          },\n          variant: \"outlined\",\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Box, {\n        flexGrow: 0,\n        mt: {\n          xs: 1,\n          md: 0\n        },\n        pl: {\n          md: 1\n        },\n        width: {\n          xs: 1,\n          md: 'auto'\n        },\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          size: \"large\",\n          children: \"Add Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NewCardForm, \"1Dl2/NgnpNR+bKr9QN9wrjUxBJM=\", false, function () {\n  return [useForm];\n});\n\n_c = NewCardForm;\nexport { NewCardForm };\n\nvar _c;\n\n$RefreshReg$(_c, \"NewCardForm\");","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/components/NewCardForm/NewCardForm.tsx"],"names":["React","useForm","Box","TextField","Button","NewCardForm","onAdd","handleSubmit","reset","register","errors","questionRef","useRef","onSubmit","question","answer","current","focus","xs","sm","md","element","required","message","Boolean","htmlFor","id"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useForm } from 'react-hook-form'\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\ntype FormFields = {\n  question: string\n  answer: string\n}\n\ntype Props = {\n  onAdd: (question: string, answer: string) => void\n}\n\nconst NewCardForm: React.FC<Props> = ({ onAdd }) => {\n  const { handleSubmit, reset, register, errors } = useForm<FormFields>()\n  const questionRef = React.useRef<HTMLInputElement>()\n  const onSubmit = ({ question, answer }: FormFields) => {\n    onAdd(question, answer)\n    reset()\n    questionRef.current?.focus()\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} data-testid=\"new-card-form\">\n      <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\n        <Box flexGrow={1} pr={{ xs: 0, sm: 1 }} width={{ xs: 1, sm: 1 / 2, md: 'auto' }}>\n          <TextField\n            name=\"question\"\n            defaultValue=\"\"\n            inputRef={(element: HTMLInputElement) => {\n              register(element, { required: 'Provide a Question' })\n              questionRef.current = element\n            }}\n            helperText={errors.question?.message}\n            error={Boolean(errors.question)}\n            label=\"Question\"\n            InputLabelProps={{\n              htmlFor: 'new-card-form-question',\n            }}\n            InputProps={{\n              id: 'new-card-form-question',\n            }}\n            variant=\"outlined\"\n            fullWidth={true}\n            autoFocus\n          />\n        </Box>\n        <Box\n          flexGrow={1}\n          pl={{ xs: 0, sm: 1 }}\n          pr={{ md: 1 }}\n          width={{ xs: 1, sm: 1 / 2, md: 'auto' }}\n        >\n          <TextField\n            name=\"answer\"\n            defaultValue=\"\"\n            inputRef={register({ required: 'Provide an Answer' })}\n            helperText={errors.answer?.message}\n            error={Boolean(errors.answer)}\n            label=\"Answer\"\n            InputLabelProps={{\n              htmlFor: 'new-card-form-answer',\n            }}\n            InputProps={{\n              id: 'new-card-form-answer',\n            }}\n            variant=\"outlined\"\n            fullWidth={true}\n          />\n        </Box>\n        <Box\n          flexGrow={0}\n          mt={{ xs: 1, md: 0 }}\n          pl={{ md: 1 }}\n          width={{ xs: 1, md: 'auto' }}\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"center\"\n        >\n          <Button type=\"submit\" variant=\"contained\" size=\"large\">\n            Add Card\n          </Button>\n        </Box>\n      </Box>\n    </form>\n  )\n}\n\nexport { NewCardForm }\n"]},"metadata":{},"sourceType":"module"}