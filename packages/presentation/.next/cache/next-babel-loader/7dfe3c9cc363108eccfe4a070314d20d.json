{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { UserData } from '../../usecase/protocols';\nimport { LoginProvidersData } from '../../usecase/protocols/LoginProvidersData';\n\nvar FirebaseService = /*#__PURE__*/function () {\n  function FirebaseService(options) {\n    _classCallCheck(this, FirebaseService);\n\n    _defineProperty(this, \"firebase\", void 0);\n\n    if (firebase.apps.length === 0) {\n      firebase.initializeApp(options);\n    }\n  }\n\n  _createClass(FirebaseService, [{\n    key: \"getUserToken\",\n    value: function getUserToken() {\n      var firebaseUser = firebase.auth().currentUser;\n\n      if (!firebaseUser) {\n        return Promise.resolve(null);\n      }\n\n      return firebaseUser.getIdToken(true);\n    }\n  }, {\n    key: \"getCurrentUser\",\n    value: function () {\n      var _getCurrentUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _firebaseUser$email, _firebaseUser$emailVe, _firebaseUser$display, _firebaseUser$photoUR;\n\n        var firebaseUser;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                firebaseUser = firebase.auth().currentUser;\n\n                if (firebaseUser) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 3:\n                return _context.abrupt(\"return\", {\n                  email: (_firebaseUser$email = firebaseUser.email) !== null && _firebaseUser$email !== void 0 ? _firebaseUser$email : '',\n                  emailVerified: (_firebaseUser$emailVe = firebaseUser.emailVerified) !== null && _firebaseUser$emailVe !== void 0 ? _firebaseUser$emailVe : false,\n                  name: (_firebaseUser$display = firebaseUser.displayName) !== null && _firebaseUser$display !== void 0 ? _firebaseUser$display : '',\n                  photoUrl: (_firebaseUser$photoUR = firebaseUser.photoURL) !== null && _firebaseUser$photoUR !== void 0 ? _firebaseUser$photoUR : '',\n                  uid: firebaseUser.uid\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getCurrentUser() {\n        return _getCurrentUser.apply(this, arguments);\n      }\n\n      return getCurrentUser;\n    }()\n  }, {\n    key: \"userObserver\",\n    value: function userObserver(callback) {\n      firebase.auth().onAuthStateChanged( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(firebaseUser) {\n          var _firebaseUser$email2, _firebaseUser$emailVe2, _firebaseUser$display2, _firebaseUser$photoUR2;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (firebaseUser) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\", callback(null));\n\n                case 2:\n                  callback({\n                    email: (_firebaseUser$email2 = firebaseUser.email) !== null && _firebaseUser$email2 !== void 0 ? _firebaseUser$email2 : '',\n                    emailVerified: (_firebaseUser$emailVe2 = firebaseUser.emailVerified) !== null && _firebaseUser$emailVe2 !== void 0 ? _firebaseUser$emailVe2 : false,\n                    name: (_firebaseUser$display2 = firebaseUser.displayName) !== null && _firebaseUser$display2 !== void 0 ? _firebaseUser$display2 : '',\n                    photoUrl: (_firebaseUser$photoUR2 = firebaseUser.photoURL) !== null && _firebaseUser$photoUR2 !== void 0 ? _firebaseUser$photoUR2 : '',\n                    uid: firebaseUser.uid\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getFirebaseProvider\",\n    value: function getFirebaseProvider(provider) {\n      switch (provider) {\n        case LoginProvidersData.Google:\n          return new firebase.auth.GoogleAuthProvider();\n\n        case LoginProvidersData.Facebook:\n          return new firebase.auth.FacebookAuthProvider();\n      }\n    }\n  }, {\n    key: \"loginWithProvider\",\n    value: function () {\n      var _loginWithProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(provider) {\n        var _user$displayName, _user$email, _user$emailVerified, _user$photoURL;\n\n        var firebaseProvider, _yield$firebase$auth$, user, token;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                firebaseProvider = this.getFirebaseProvider(provider);\n                _context3.next = 3;\n                return firebase.auth().signInWithPopup(firebaseProvider);\n\n              case 3:\n                _yield$firebase$auth$ = _context3.sent;\n                user = _yield$firebase$auth$.user;\n                _context3.next = 7;\n                return user === null || user === void 0 ? void 0 : user.getIdToken(true);\n\n              case 7:\n                token = _context3.sent;\n\n                if (!(user === null)) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 10:\n                return _context3.abrupt(\"return\", new UserData({\n                  name: (_user$displayName = user.displayName) !== null && _user$displayName !== void 0 ? _user$displayName : '',\n                  email: (_user$email = user.email) !== null && _user$email !== void 0 ? _user$email : '',\n                  emailVerified: (_user$emailVerified = user.emailVerified) !== null && _user$emailVerified !== void 0 ? _user$emailVerified : false,\n                  photoUrl: (_user$photoURL = user.photoURL) !== null && _user$photoURL !== void 0 ? _user$photoURL : '',\n                  uid: user.uid,\n                  token: token\n                }));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loginWithProvider(_x2) {\n        return _loginWithProvider.apply(this, arguments);\n      }\n\n      return loginWithProvider;\n    }()\n  }]);\n\n  return FirebaseService;\n}();\n\nexport { FirebaseService };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/service/firebase/service.ts"],"names":["firebase","UserData","LoginProvidersData","FirebaseService","options","apps","length","initializeApp","firebaseUser","auth","currentUser","Promise","resolve","getIdToken","email","emailVerified","name","displayName","photoUrl","photoURL","uid","callback","onAuthStateChanged","provider","Google","GoogleAuthProvider","Facebook","FacebookAuthProvider","firebaseProvider","getFirebaseProvider","signInWithPopup","user","token"],"mappings":";;;;;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,SAASC,QAAT,QAAyB,yBAAzB;AAEA,SAASC,kBAAT,QAAmC,4CAAnC;;IAEMC,e;AAGJ,2BAAYC,OAAZ,EAA8B;AAAA;;AAAA;;AAC5B,QAAIJ,QAAQ,CAACK,IAAT,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BN,MAAAA,QAAQ,CAACO,aAAT,CAAuBH,OAAvB;AACD;AACF;;;;mCAE+B;AAC9B,UAAMI,YAAY,GAAGR,QAAQ,CAACS,IAAT,GAAgBC,WAArC;;AAEA,UAAI,CAACF,YAAL,EAAmB;AACjB,eAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,aAAOJ,YAAY,CAACK,UAAb,CAAwB,IAAxB,CAAP;AACD;;;;;;;;;;;;AAGOL,gBAAAA,Y,GAAeR,QAAQ,CAACS,IAAT,GAAgBC,W;;oBAEhCF,Y;;;;;iDACI,I;;;iDAGF;AACLM,kBAAAA,KAAK,yBAAEN,YAAY,CAACM,KAAf,qEAAwB,EADxB;AAELC,kBAAAA,aAAa,2BAAEP,YAAY,CAACO,aAAf,yEAAgC,KAFxC;AAGLC,kBAAAA,IAAI,2BAAER,YAAY,CAACS,WAAf,yEAA8B,EAH7B;AAILC,kBAAAA,QAAQ,2BAAEV,YAAY,CAACW,QAAf,yEAA2B,EAJ9B;AAKLC,kBAAAA,GAAG,EAAEZ,YAAY,CAACY;AALb,iB;;;;;;;;;;;;;;;;;;iCASIC,Q,EAA0C;AACrDrB,MAAAA,QAAQ,CAACS,IAAT,GAAgBa,kBAAhB;AAAA,4EAAmC,kBAAMd,YAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBAC5BA,YAD4B;AAAA;AAAA;AAAA;;AAAA,oDAExBa,QAAQ,CAAC,IAAD,CAFgB;;AAAA;AAKjCA,kBAAAA,QAAQ,CAAC;AACPP,oBAAAA,KAAK,0BAAEN,YAAY,CAACM,KAAf,uEAAwB,EADtB;AAEPC,oBAAAA,aAAa,4BAAEP,YAAY,CAACO,aAAf,2EAAgC,KAFtC;AAGPC,oBAAAA,IAAI,4BAAER,YAAY,CAACS,WAAf,2EAA8B,EAH3B;AAIPC,oBAAAA,QAAQ,4BAAEV,YAAY,CAACW,QAAf,2EAA2B,EAJ5B;AAKPC,oBAAAA,GAAG,EAAEZ,YAAY,CAACY;AALX,mBAAD,CAAR;;AALiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnC;;AAAA;AAAA;AAAA;AAAA;AAaD;;;wCAE2BG,Q,EAA0D;AACpF,cAAQA,QAAR;AACE,aAAKrB,kBAAkB,CAACsB,MAAxB;AACE,iBAAO,IAAIxB,QAAQ,CAACS,IAAT,CAAcgB,kBAAlB,EAAP;;AACF,aAAKvB,kBAAkB,CAACwB,QAAxB;AACE,iBAAO,IAAI1B,QAAQ,CAACS,IAAT,CAAckB,oBAAlB,EAAP;AAJJ;AAMD;;;;0GAEuBJ,Q;;;;;;;;;AAChBK,gBAAAA,gB,GAAmB,KAAKC,mBAAL,CAAyBN,QAAzB,C;;uBACFvB,QAAQ,CAACS,IAAT,GAAgBqB,eAAhB,CAAgCF,gBAAhC,C;;;;AAAfG,gBAAAA,I,yBAAAA,I;;uBACYA,I,aAAAA,I,uBAAAA,IAAI,CAAElB,UAAN,CAAiB,IAAjB,C;;;AAAdmB,gBAAAA,K;;sBAEFD,IAAI,KAAK,I;;;;;kDACJ,I;;;kDAGF,IAAI9B,QAAJ,CAAa;AAClBe,kBAAAA,IAAI,uBAAEe,IAAI,CAACd,WAAP,iEAAsB,EADR;AAElBH,kBAAAA,KAAK,iBAAEiB,IAAI,CAACjB,KAAP,qDAAgB,EAFH;AAGlBC,kBAAAA,aAAa,yBAAEgB,IAAI,CAAChB,aAAP,qEAAwB,KAHnB;AAIlBG,kBAAAA,QAAQ,oBAAEa,IAAI,CAACZ,QAAP,2DAAmB,EAJT;AAKlBC,kBAAAA,GAAG,EAAEW,IAAI,CAACX,GALQ;AAMlBY,kBAAAA,KAAK,EAALA;AANkB,iBAAb,C;;;;;;;;;;;;;;;;;;;;;AAWX,SAAS7B,eAAT","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport { UserData } from '../../usecase/protocols'\nimport { AuthService } from '../AuthService'\nimport { LoginProvidersData } from '../../usecase/protocols/LoginProvidersData'\n\nclass FirebaseService implements AuthService {\n  private readonly firebase: firebase.app.App\n\n  constructor(options: unknown) {\n    if (firebase.apps.length === 0) {\n      firebase.initializeApp(options)\n    }\n  }\n\n  getUserToken(): Promise<string> {\n    const firebaseUser = firebase.auth().currentUser\n\n    if (!firebaseUser) {\n      return Promise.resolve(null)\n    }\n\n    return firebaseUser.getIdToken(true)\n  }\n\n  async getCurrentUser(): Promise<UserData> {\n    const firebaseUser = firebase.auth().currentUser\n\n    if (!firebaseUser) {\n      return null\n    }\n\n    return {\n      email: firebaseUser.email ?? '',\n      emailVerified: firebaseUser.emailVerified ?? false,\n      name: firebaseUser.displayName ?? '',\n      photoUrl: firebaseUser.photoURL ?? '',\n      uid: firebaseUser.uid,\n    }\n  }\n\n  userObserver(callback: (user: UserData) => void): void {\n    firebase.auth().onAuthStateChanged(async firebaseUser => {\n      if (!firebaseUser) {\n        return callback(null)\n      }\n\n      callback({\n        email: firebaseUser.email ?? '',\n        emailVerified: firebaseUser.emailVerified ?? false,\n        name: firebaseUser.displayName ?? '',\n        photoUrl: firebaseUser.photoURL ?? '',\n        uid: firebaseUser.uid,\n      })\n    })\n  }\n\n  private getFirebaseProvider(provider: LoginProvidersData): firebase.auth.AuthProvider {\n    switch (provider) {\n      case LoginProvidersData.Google:\n        return new firebase.auth.GoogleAuthProvider()\n      case LoginProvidersData.Facebook:\n        return new firebase.auth.FacebookAuthProvider()\n    }\n  }\n\n  async loginWithProvider(provider: LoginProvidersData): Promise<UserData> {\n    const firebaseProvider = this.getFirebaseProvider(provider)\n    const { user } = await firebase.auth().signInWithPopup(firebaseProvider)\n    const token = await user?.getIdToken(true)\n\n    if (user === null) {\n      return null\n    }\n\n    return new UserData({\n      name: user.displayName ?? '',\n      email: user.email ?? '',\n      emailVerified: user.emailVerified ?? false,\n      photoUrl: user.photoURL ?? '',\n      uid: user.uid,\n      token,\n    })\n  }\n}\n\nexport { FirebaseService }\n"]},"metadata":{},"sourceType":"module"}