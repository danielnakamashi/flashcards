{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/contexts/auth.tsx\";\nimport * as React from 'react';\nimport { factory } from '@flashcards/client';\nconst userObserver = factory.createUserObserver();\nconst AuthContext = /*#__PURE__*/React.createContext(initialState);\nconst initialState = {\n  user: null,\n  loading: true\n};\n\nconst reducer = (state, action) => {\n  if (action.type === 'loaded') {\n    return {\n      loading: false,\n      user: action.payload\n    };\n  }\n\n  return state;\n};\n\nconst AuthProvider = ({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  React.useEffect(() => {\n    let isMounted = true;\n    userObserver(user => {\n      if (isMounted) {\n        dispatch({\n          type: 'loaded',\n          payload: user\n        });\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: state,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n\nconst useAuth = () => {\n  return React.useContext(AuthContext);\n};\n\nexport { AuthProvider, useAuth };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/contexts/auth.tsx"],"names":["React","factory","userObserver","createUserObserver","AuthContext","createContext","initialState","user","loading","reducer","state","action","type","payload","AuthProvider","children","dispatch","useReducer","useEffect","isMounted","useAuth","useContext"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,OAAT,QAAwB,oBAAxB;AASA,MAAMC,YAAY,GAAGD,OAAO,CAACE,kBAAR,EAArB;AACA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,CAA2BC,YAA3B,CAApB;AAEA,MAAMA,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,OAAO,EAAE;AAAvB,CAArB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAyC;AACvD,MAAIA,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLJ,MAAAA,OAAO,EAAE,KADJ;AAELD,MAAAA,IAAI,EAAEI,MAAM,CAACE;AAFR,KAAP;AAID;;AAED,SAAOH,KAAP;AACD,CATD;;AAeA,MAAMI,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqC;AACxD,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBhB,KAAK,CAACiB,UAAN,CAAiBR,OAAjB,EAA0BH,YAA1B,CAA1B;AAEAN,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,QAAIC,SAAS,GAAG,IAAhB;AAEAjB,IAAAA,YAAY,CAACK,IAAI,IAAI;AACnB,UAAIY,SAAJ,EAAe;AACbH,QAAAA,QAAQ,CAAC;AAAEJ,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,OAAO,EAAEN;AAA3B,SAAD,CAAR;AACD;AACF,KAJW,CAAZ;AAMA,WAAO,MAAM;AACXY,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAZD,EAYG,EAZH;AAcA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAET,KAA7B;AAAA,cAAqCK;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;AAoBA,MAAMK,OAAO,GAAG,MAAM;AACpB,SAAOpB,KAAK,CAACqB,UAAN,CAAiBjB,WAAjB,CAAP;AACD,CAFD;;AAIA,SAASU,YAAT,EAAuBM,OAAvB","sourcesContent":["import * as React from 'react'\nimport type { UserData } from '@flashcards/client'\nimport { factory } from '@flashcards/client'\n\ntype State = {\n  user: UserData | null\n  loading: boolean\n}\n\ntype Action = { type: 'loaded'; payload: UserData | null }\n\nconst userObserver = factory.createUserObserver()\nconst AuthContext = React.createContext<State>(initialState)\n\nconst initialState = { user: null, loading: true }\n\nconst reducer = (state: State, action: Action): State => {\n  if (action.type === 'loaded') {\n    return {\n      loading: false,\n      user: action.payload,\n    }\n  }\n\n  return state\n}\n\ntype AuthProviderProps = {\n  children: React.ReactNode\n}\n\nconst AuthProvider = ({ children }: AuthProviderProps) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n\n  React.useEffect(() => {\n    let isMounted = true\n\n    userObserver(user => {\n      if (isMounted) {\n        dispatch({ type: 'loaded', payload: user })\n      }\n    })\n\n    return () => {\n      isMounted = false\n    }\n  }, [])\n\n  return <AuthContext.Provider value={state}>{children}</AuthContext.Provider>\n}\n\nconst useAuth = () => {\n  return React.useContext(AuthContext)\n}\n\nexport { AuthProvider, useAuth }\n"]},"metadata":{},"sourceType":"module"}