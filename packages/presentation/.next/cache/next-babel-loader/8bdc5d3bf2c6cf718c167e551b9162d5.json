{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation AddCard($topicId: String!, $question: String!, $answer: String!) {\\n      addCard(topicId: $topicId, card: { question: $question, answer: $answer }) {\\n        id\\n        question\\n        answer\\n      }\\n    }\\n  \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation RemoveTopic($topicId: String!) {\\n      removeTopic(topicId: $topicId)\\n    }\\n  \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation AddTopic($name: String!) {\\n      addTopic(name: $name) {\\n        id\\n        name\\n      }\\n    }\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query Topic($topicId: String!) {\\n      topic(topicId: $topicId) {\\n        id\\n        name\\n        cards {\\n          id\\n          question\\n          answer\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Topics {\\n      topics {\\n        id\\n        name\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport { CardData, TopicData } from '../../usecase/protocols';\nimport { Observer } from '../Observer';\n\nvar GraphqlService = /*#__PURE__*/function () {\n  function GraphqlService(client) {\n    _classCallCheck(this, GraphqlService);\n\n    this.client = client;\n  }\n\n  _createClass(GraphqlService, [{\n    key: \"getTopics\",\n    value: function () {\n      var _getTopics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token) {\n        var _yield$this$client$qu, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.client.query({\n                  query: GraphqlService.queryTopics,\n                  context: {\n                    headers: {\n                      authentication: token\n                    }\n                  },\n                  fetchPolicy: 'no-cache'\n                });\n\n              case 2:\n                _yield$this$client$qu = _context.sent;\n                data = _yield$this$client$qu.data;\n                return _context.abrupt(\"return\", data.topics.map(function (topicData) {\n                  return new TopicData(topicData);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getTopics(_x) {\n        return _getTopics.apply(this, arguments);\n      }\n\n      return getTopics;\n    }()\n  }, {\n    key: \"getTopicsObserver\",\n    value: function getTopicsObserver(token) {\n      var _this = this;\n\n      return new Observer(function (_next, error) {\n        var observable = _this.client.watchQuery({\n          query: GraphqlService.queryTopics,\n          context: {\n            headers: {\n              authentication: token\n            }\n          }\n        });\n\n        observable.subscribe({\n          next: function next(_ref) {\n            var data = _ref.data;\n\n            _next(data.topics.map(function (topicData) {\n              return new TopicData(topicData);\n            }));\n          },\n          error: error\n        });\n      });\n    }\n  }, {\n    key: \"getTopic\",\n    value: function () {\n      var _getTopic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token, topicId) {\n        var _yield$this$client$qu2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.client.query({\n                  query: GraphqlService.queryTopic,\n                  variables: {\n                    topicId: topicId\n                  },\n                  context: {\n                    headers: {\n                      authentication: token\n                    }\n                  },\n                  fetchPolicy: 'no-cache'\n                });\n\n              case 2:\n                _yield$this$client$qu2 = _context2.sent;\n                data = _yield$this$client$qu2.data;\n                return _context2.abrupt(\"return\", new TopicData({\n                  id: data.topic.id,\n                  name: data.topic.name,\n                  cards: data.topic.cards.map(function (_ref2) {\n                    var id = _ref2.id,\n                        question = _ref2.question,\n                        answer = _ref2.answer;\n                    return new CardData({\n                      id: id,\n                      front: question,\n                      back: answer\n                    });\n                  })\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getTopic(_x2, _x3) {\n        return _getTopic.apply(this, arguments);\n      }\n\n      return getTopic;\n    }()\n  }, {\n    key: \"addTopic\",\n    value: function () {\n      var _addTopic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token, inputData) {\n        var context, _yield$this$client$mu, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                context = {\n                  headers: {\n                    authentication: token\n                  }\n                };\n                _context3.next = 3;\n                return this.client.mutate({\n                  mutation: GraphqlService.mutationAddTopic,\n                  variables: {\n                    name: inputData.name\n                  },\n                  context: context,\n                  refetchQueries: [{\n                    query: GraphqlService.queryTopics,\n                    context: context\n                  }]\n                });\n\n              case 3:\n                _yield$this$client$mu = _context3.sent;\n                data = _yield$this$client$mu.data;\n                return _context3.abrupt(\"return\", data ? new TopicData({\n                  id: data.id,\n                  name: data.name\n                }) : null);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function addTopic(_x4, _x5) {\n        return _addTopic.apply(this, arguments);\n      }\n\n      return addTopic;\n    }()\n  }, {\n    key: \"removeTopic\",\n    value: function () {\n      var _removeTopic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(token, topicId) {\n        var context;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                context = {\n                  headers: {\n                    authentication: token\n                  }\n                };\n                _context4.next = 3;\n                return this.client.mutate({\n                  mutation: GraphqlService.mutationRemoveTopic,\n                  variables: {\n                    topicId: topicId\n                  },\n                  context: context,\n                  refetchQueries: [{\n                    query: GraphqlService.queryTopics,\n                    context: context\n                  }]\n                });\n\n              case 3:\n                return _context4.abrupt(\"return\", true);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function removeTopic(_x6, _x7) {\n        return _removeTopic.apply(this, arguments);\n      }\n\n      return removeTopic;\n    }()\n  }, {\n    key: \"addCard\",\n    value: function () {\n      var _addCard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(token, inputData) {\n        var context, _yield$this$client$mu2, data;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                context = {\n                  headers: {\n                    authentication: token\n                  }\n                };\n                _context5.next = 3;\n                return this.client.mutate({\n                  mutation: GraphqlService.mutationAddCard,\n                  variables: inputData,\n                  context: context,\n                  refetchQueries: [{\n                    query: GraphqlService.queryTopic,\n                    variables: {\n                      topicId: inputData.topicId\n                    },\n                    context: context\n                  }]\n                });\n\n              case 3:\n                _yield$this$client$mu2 = _context5.sent;\n                data = _yield$this$client$mu2.data;\n                return _context5.abrupt(\"return\", new CardData({\n                  id: data.id,\n                  front: data.question,\n                  back: data.answer\n                }));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function addCard(_x8, _x9) {\n        return _addCard.apply(this, arguments);\n      }\n\n      return addCard;\n    }()\n  }]);\n\n  return GraphqlService;\n}();\n\n_defineProperty(GraphqlService, \"queryTopics\", gql(_templateObject()));\n\n_defineProperty(GraphqlService, \"queryTopic\", gql(_templateObject2()));\n\n_defineProperty(GraphqlService, \"mutationAddTopic\", gql(_templateObject3()));\n\n_defineProperty(GraphqlService, \"mutationRemoveTopic\", gql(_templateObject4()));\n\n_defineProperty(GraphqlService, \"mutationAddCard\", gql(_templateObject5()));\n\nexport { GraphqlService };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/service/graphql/service.ts"],"names":["gql","CardData","TopicData","Observer","GraphqlService","client","token","query","queryTopics","context","headers","authentication","fetchPolicy","data","topics","map","topicData","next","error","observable","watchQuery","subscribe","topicId","queryTopic","variables","id","topic","name","cards","question","answer","front","back","inputData","mutate","mutation","mutationAddTopic","refetchQueries","mutationRemoveTopic","mutationAddCard"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAA8CA,GAA9C,QAAyD,gBAAzD;AAeA,SAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,yBAAhD;AACA,SAASC,QAAT,QAAyB,aAAzB;;IAIMC,c;AAoDJ,0BAA6BC,MAA7B,EAA0E;AAAA;;AAAA,SAA7CA,MAA6C,GAA7CA,MAA6C;AAAE;;;;;iGAE5DC,K;;;;;;;;uBACS,KAAKD,MAAL,CAAYE,KAAZ,CAA2C;AAChEA,kBAAAA,KAAK,EAAEH,cAAc,CAACI,WAD0C;AAEhEC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,OAAO,EAAE;AACPC,sBAAAA,cAAc,EAAEL;AADT;AADF,mBAFuD;AAOhEM,kBAAAA,WAAW,EAAE;AAPmD,iBAA3C,C;;;;AAAfC,gBAAAA,I,yBAAAA,I;iDAUDA,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgB,UAAAC,SAAS;AAAA,yBAAI,IAAId,SAAJ,CAAcc,SAAd,CAAJ;AAAA,iBAAzB,C;;;;;;;;;;;;;;;;;;sCAGSV,K,EAAwC;AAAA;;AACxD,aAAO,IAAIH,QAAJ,CAAa,UAACc,KAAD,EAAOC,KAAP,EAAiB;AACnC,YAAMC,UAAU,GAAG,KAAI,CAACd,MAAL,CAAYe,UAAZ,CAAgD;AACjEb,UAAAA,KAAK,EAAEH,cAAc,CAACI,WAD2C;AAEjEC,UAAAA,OAAO,EAAE;AACPC,YAAAA,OAAO,EAAE;AACPC,cAAAA,cAAc,EAAEL;AADT;AADF;AAFwD,SAAhD,CAAnB;;AAQAa,QAAAA,UAAU,CAACE,SAAX,CAAqB;AACnBJ,UAAAA,IAAI,EAAE,oBAAc;AAAA,gBAAXJ,IAAW,QAAXA,IAAW;;AAClBI,YAAAA,KAAI,CAACJ,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgB,UAAAC,SAAS;AAAA,qBAAI,IAAId,SAAJ,CAAcc,SAAd,CAAJ;AAAA,aAAzB,CAAD,CAAJ;AACD,WAHkB;AAInBE,UAAAA,KAAK,EAALA;AAJmB,SAArB;AAMD,OAfM,CAAP;AAgBD;;;;iGAEcZ,K,EAAegB,O;;;;;;;;uBACL,KAAKjB,MAAL,CAAYE,KAAZ,CAAsC;AAC3DA,kBAAAA,KAAK,EAAEH,cAAc,CAACmB,UADqC;AAE3DC,kBAAAA,SAAS,EAAE;AACTF,oBAAAA,OAAO,EAAPA;AADS,mBAFgD;AAK3Db,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,OAAO,EAAE;AACPC,sBAAAA,cAAc,EAAEL;AADT;AADF,mBALkD;AAU3DM,kBAAAA,WAAW,EAAE;AAV8C,iBAAtC,C;;;;AAAfC,gBAAAA,I,0BAAAA,I;kDAaD,IAAIX,SAAJ,CAAc;AACnBuB,kBAAAA,EAAE,EAAEZ,IAAI,CAACa,KAAL,CAAWD,EADI;AAEnBE,kBAAAA,IAAI,EAAEd,IAAI,CAACa,KAAL,CAAWC,IAFE;AAGnBC,kBAAAA,KAAK,EAAEf,IAAI,CAACa,KAAL,CAAWE,KAAX,CAAiBb,GAAjB,CACL;AAAA,wBAAGU,EAAH,SAAGA,EAAH;AAAA,wBAAOI,QAAP,SAAOA,QAAP;AAAA,wBAAiBC,MAAjB,SAAiBA,MAAjB;AAAA,2BAA8B,IAAI7B,QAAJ,CAAa;AAAEwB,sBAAAA,EAAE,EAAFA,EAAF;AAAMM,sBAAAA,KAAK,EAAEF,QAAb;AAAuBG,sBAAAA,IAAI,EAAEF;AAA7B,qBAAb,CAA9B;AAAA,mBADK;AAHY,iBAAd,C;;;;;;;;;;;;;;;;;;;iGASMxB,K,EAAe2B,S;;;;;;;AACtBxB,gBAAAA,O,GAAU;AACdC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,cAAc,EAAEL;AADT;AADK,iB;;uBAKO,KAAKD,MAAL,CAAY6B,MAAZ,CAAiD;AACtEC,kBAAAA,QAAQ,EAAE/B,cAAc,CAACgC,gBAD6C;AAEtEZ,kBAAAA,SAAS,EAAE;AACTG,oBAAAA,IAAI,EAAEM,SAAS,CAACN;AADP,mBAF2D;AAKtElB,kBAAAA,OAAO,EAAPA,OALsE;AAMtE4B,kBAAAA,cAAc,EAAE,CACd;AACE9B,oBAAAA,KAAK,EAAEH,cAAc,CAACI,WADxB;AAEEC,oBAAAA,OAAO,EAAPA;AAFF,mBADc;AANsD,iBAAjD,C;;;;AAAfI,gBAAAA,I,yBAAAA,I;kDAcDA,IAAI,GAAG,IAAIX,SAAJ,CAAc;AAAEuB,kBAAAA,EAAE,EAAEZ,IAAI,CAACY,EAAX;AAAeE,kBAAAA,IAAI,EAAEd,IAAI,CAACc;AAA1B,iBAAd,CAAH,GAAqD,I;;;;;;;;;;;;;;;;;;;oGAGhDrB,K,EAAegB,O;;;;;;AACzBb,gBAAAA,O,GAAU;AACdC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,cAAc,EAAEL;AADT;AADK,iB;;uBAKV,KAAKD,MAAL,CAAY6B,MAAZ,CAAmB;AACvBC,kBAAAA,QAAQ,EAAE/B,cAAc,CAACkC,mBADF;AAEvBd,kBAAAA,SAAS,EAAE;AACTF,oBAAAA,OAAO,EAAPA;AADS,mBAFY;AAKvBb,kBAAAA,OAAO,EAAPA,OALuB;AAMvB4B,kBAAAA,cAAc,EAAE,CACd;AACE9B,oBAAAA,KAAK,EAAEH,cAAc,CAACI,WADxB;AAEEC,oBAAAA,OAAO,EAAPA;AAFF,mBADc;AANO,iBAAnB,C;;;kDAcC,I;;;;;;;;;;;;;;;;;;;gGAGKH,K,EAAe2B,S;;;;;;;AACrBxB,gBAAAA,O,GAAU;AACdC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,cAAc,EAAEL;AADT;AADK,iB;;uBAKO,KAAKD,MAAL,CAAY6B,MAAZ,CAAqE;AAC1FC,kBAAAA,QAAQ,EAAE/B,cAAc,CAACmC,eADiE;AAE1Ff,kBAAAA,SAAS,EAAES,SAF+E;AAG1FxB,kBAAAA,OAAO,EAAPA,OAH0F;AAI1F4B,kBAAAA,cAAc,EAAE,CACd;AACE9B,oBAAAA,KAAK,EAAEH,cAAc,CAACmB,UADxB;AAEEC,oBAAAA,SAAS,EAAE;AACTF,sBAAAA,OAAO,EAAEW,SAAS,CAACX;AADV,qBAFb;AAKEb,oBAAAA,OAAO,EAAPA;AALF,mBADc;AAJ0E,iBAArE,C;;;;AAAfI,gBAAAA,I,0BAAAA,I;kDAeD,IAAIZ,QAAJ,CAAa;AAAEwB,kBAAAA,EAAE,EAAEZ,IAAI,CAACY,EAAX;AAAeM,kBAAAA,KAAK,EAAElB,IAAI,CAACgB,QAA3B;AAAqCG,kBAAAA,IAAI,EAAEnB,IAAI,CAACiB;AAAhD,iBAAb,C;;;;;;;;;;;;;;;;;;;;;gBAjLL1B,c,iBAQkCJ,G;;gBARlCI,c,gBAgBiCJ,G;;gBAhBjCI,c,sBA6BuCJ,G;;gBA7BvCI,c,yBAqC0CJ,G;;gBArC1CI,c,qBA0CsCJ,G;;AA2I5C,SAASI,cAAT","sourcesContent":["import { ApolloClient, NormalizedCacheObject, gql } from '@apollo/client'\nimport { RemoveTopicService } from '../../usecase/RemoveTopic'\n// import {\n//   AddTopicService,\n//   GetTopicsService,\n//   TopicData,\n//   AddTopicServiceParam,\n//   AddCardServiceInput,\n//   AddCardService,\n//   GetTopicsObserverService,\n// } from '../../usecase'\nimport { AddTopicService, AddTopicServiceParam } from '../../usecase/AddTopic'\nimport { GetTopicsService } from '../../usecase/GetTopics'\nimport { GetTopicsObserverService } from '../../usecase/GetTopicsObserver'\nimport { AddCardService, AddCardServiceInput } from '../../usecase/AddCard'\nimport { Observable, CardData, TopicData } from '../../usecase/protocols'\nimport { Observer } from '../Observer'\nimport { Topic as TopicDB } from './entities/Topic'\nimport { GetTopicService } from '../../usecase/GetTopic'\n\nclass GraphqlService\n  implements\n    GetTopicsService,\n    GetTopicsObserverService,\n    GetTopicService,\n    AddTopicService,\n    RemoveTopicService,\n    AddCardService {\n  private static readonly queryTopics = gql`\n    query Topics {\n      topics {\n        id\n        name\n      }\n    }\n  `\n  private static readonly queryTopic = gql`\n    query Topic($topicId: String!) {\n      topic(topicId: $topicId) {\n        id\n        name\n        cards {\n          id\n          question\n          answer\n        }\n      }\n    }\n  `\n  private static readonly mutationAddTopic = gql`\n    mutation AddTopic($name: String!) {\n      addTopic(name: $name) {\n        id\n        name\n      }\n    }\n  `\n  private static readonly mutationRemoveTopic = gql`\n    mutation RemoveTopic($topicId: String!) {\n      removeTopic(topicId: $topicId)\n    }\n  `\n  private static readonly mutationAddCard = gql`\n    mutation AddCard($topicId: String!, $question: String!, $answer: String!) {\n      addCard(topicId: $topicId, card: { question: $question, answer: $answer }) {\n        id\n        question\n        answer\n      }\n    }\n  `\n\n  constructor(private readonly client: ApolloClient<NormalizedCacheObject>) {}\n\n  async getTopics(token: string): Promise<TopicData[]> {\n    const { data } = await this.client.query<{ topics: TopicData[] }>({\n      query: GraphqlService.queryTopics,\n      context: {\n        headers: {\n          authentication: token,\n        },\n      },\n      fetchPolicy: 'no-cache',\n    })\n\n    return data.topics.map(topicData => new TopicData(topicData))\n  }\n\n  getTopicsObserver(token: string): Observable<TopicData[]> {\n    return new Observer((next, error) => {\n      const observable = this.client.watchQuery<{ topics: TopicData[] }>({\n        query: GraphqlService.queryTopics,\n        context: {\n          headers: {\n            authentication: token,\n          },\n        },\n      })\n      observable.subscribe({\n        next: ({ data }) => {\n          next(data.topics.map(topicData => new TopicData(topicData)))\n        },\n        error,\n      })\n    })\n  }\n\n  async getTopic(token: string, topicId: string): Promise<TopicData> {\n    const { data } = await this.client.query<{ topic: TopicDB }>({\n      query: GraphqlService.queryTopic,\n      variables: {\n        topicId,\n      },\n      context: {\n        headers: {\n          authentication: token,\n        },\n      },\n      fetchPolicy: 'no-cache',\n    })\n\n    return new TopicData({\n      id: data.topic.id,\n      name: data.topic.name,\n      cards: data.topic.cards.map(\n        ({ id, question, answer }) => new CardData({ id, front: question, back: answer }),\n      ),\n    })\n  }\n\n  async addTopic(token: string, inputData: AddTopicServiceParam): Promise<TopicData | null> {\n    const context = {\n      headers: {\n        authentication: token,\n      },\n    }\n    const { data } = await this.client.mutate<{ id: string; name: string }>({\n      mutation: GraphqlService.mutationAddTopic,\n      variables: {\n        name: inputData.name,\n      },\n      context,\n      refetchQueries: [\n        {\n          query: GraphqlService.queryTopics,\n          context,\n        },\n      ],\n    })\n\n    return data ? new TopicData({ id: data.id, name: data.name }) : null\n  }\n\n  async removeTopic(token: string, topicId: string): Promise<boolean> {\n    const context = {\n      headers: {\n        authentication: token,\n      },\n    }\n    await this.client.mutate({\n      mutation: GraphqlService.mutationRemoveTopic,\n      variables: {\n        topicId,\n      },\n      context,\n      refetchQueries: [\n        {\n          query: GraphqlService.queryTopics,\n          context,\n        },\n      ],\n    })\n\n    return true\n  }\n\n  async addCard(token: string, inputData: AddCardServiceInput): Promise<CardData> {\n    const context = {\n      headers: {\n        authentication: token,\n      },\n    }\n    const { data } = await this.client.mutate<{ id: string; question: string; answer: string }>({\n      mutation: GraphqlService.mutationAddCard,\n      variables: inputData,\n      context,\n      refetchQueries: [\n        {\n          query: GraphqlService.queryTopic,\n          variables: {\n            topicId: inputData.topicId,\n          },\n          context,\n        },\n      ],\n    })\n\n    return new CardData({ id: data.id, front: data.question, back: data.answer })\n  }\n}\n\nexport { GraphqlService }\n"]},"metadata":{},"sourceType":"module"}