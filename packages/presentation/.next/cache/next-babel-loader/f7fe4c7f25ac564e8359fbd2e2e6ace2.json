{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Card, Topic } from '@flashcards/core';\nimport { Observer } from '../service/Observer';\n\nvar UseCases = /*#__PURE__*/function () {\n  function UseCases(authService, repositoryService) {\n    _classCallCheck(this, UseCases);\n\n    _defineProperty(this, \"authService\", void 0);\n\n    _defineProperty(this, \"repositoryService\", void 0);\n\n    this.authService = authService;\n    this.repositoryService = repositoryService;\n  }\n\n  _createClass(UseCases, [{\n    key: \"addCard\",\n    value: function () {\n      var _addCard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, input) {\n        var cardData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.repositoryService.addCard(token, input);\n\n              case 2:\n                cardData = _context.sent;\n                return _context.abrupt(\"return\", new Card(cardData));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addCard(_x, _x2) {\n        return _addCard.apply(this, arguments);\n      }\n\n      return addCard;\n    }()\n  }, {\n    key: \"addTopic\",\n    value: function () {\n      var _addTopic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token, data) {\n        var topicData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.repositoryService.addTopic(token, data);\n\n              case 2:\n                topicData = _context2.sent;\n                return _context2.abrupt(\"return\", new Topic({\n                  id: topicData.id,\n                  name: topicData.name,\n                  cards: topicData.cards.map(function (card) {\n                    return new Card(card);\n                  })\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function addTopic(_x3, _x4) {\n        return _addTopic.apply(this, arguments);\n      }\n\n      return addTopic;\n    }()\n  }, {\n    key: \"getCurrentUser\",\n    value: function getCurrentUser() {\n      return this.authService.getCurrentUser();\n    }\n  }, {\n    key: \"getTopic\",\n    value: function () {\n      var _getTopic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token, topicId) {\n        var topicData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.repositoryService.getTopic(token, topicId);\n\n              case 2:\n                topicData = _context3.sent;\n                return _context3.abrupt(\"return\", new Topic({\n                  id: topicData.id,\n                  name: topicData.name,\n                  cards: topicData.cards.map(function (card) {\n                    return new Card(card);\n                  })\n                }));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getTopic(_x5, _x6) {\n        return _getTopic.apply(this, arguments);\n      }\n\n      return getTopic;\n    }()\n  }, {\n    key: \"getTopics\",\n    value: function () {\n      var _getTopics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(token) {\n        var topics;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.repositoryService.getTopics(token);\n\n              case 2:\n                topics = _context4.sent;\n                return _context4.abrupt(\"return\", topics.map(function (topicData) {\n                  return new Topic({\n                    id: topicData.id,\n                    name: topicData.name,\n                    cards: topicData.cards.map(function (card) {\n                      return new Card(card);\n                    })\n                  });\n                }));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getTopics(_x7) {\n        return _getTopics.apply(this, arguments);\n      }\n\n      return getTopics;\n    }()\n  }, {\n    key: \"getTopicsObserver\",\n    value: function getTopicsObserver(token) {\n      var _this = this;\n\n      return new Observer(function (next) {\n        var observer = _this.repositoryService.getTopicsObserver(token);\n\n        observer.subscribe(function (topicsData) {\n          console.log(topicsData);\n          next(topicsData.map(function (topicData) {\n            return new Topic({\n              id: topicData.id,\n              name: topicData.name,\n              cards: topicData.cards.map(function (card) {\n                return new Card(card);\n              })\n            });\n          }));\n        });\n      });\n    }\n  }, {\n    key: \"getUserToken\",\n    value: function getUserToken() {\n      return this.authService.getUserToken();\n    }\n  }, {\n    key: \"removeTopic\",\n    value: function removeTopic(token, topicId) {\n      return this.repositoryService.removeTopic(token, topicId);\n    }\n  }, {\n    key: \"userObserver\",\n    value: function userObserver(callback) {\n      return this.authService.userObserver(callback);\n    }\n  }]);\n\n  return UseCases;\n}();\n\nexport { UseCases };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/usecase/index.ts"],"names":["Card","Topic","Observer","UseCases","authService","repositoryService","token","input","addCard","cardData","data","addTopic","topicData","id","name","cards","map","card","getCurrentUser","topicId","getTopic","getTopics","topics","next","observer","getTopicsObserver","subscribe","topicsData","console","log","getUserToken","removeTopic","callback","userObserver"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,KAAf,QAAkC,kBAAlC;AAEA,SAASC,QAAT,QAAyB,qBAAzB;;IAaMC,Q;AAcJ,oBAAYC,WAAZ,EAAsCC,iBAAtC,EAA4E;AAAA;;AAAA;;AAAA;;AAC1E,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACD;;;;;+FAEaC,K,EAAeC,K;;;;;;;uBACJ,KAAKF,iBAAL,CAAuBG,OAAvB,CAA+BF,KAA/B,EAAsCC,KAAtC,C;;;AAAjBE,gBAAAA,Q;iDACC,IAAIT,IAAJ,CAASS,QAAT,C;;;;;;;;;;;;;;;;;;;iGAGMH,K,EAAeI,I;;;;;;;uBACJ,KAAKL,iBAAL,CAAuBM,QAAvB,CAAgCL,KAAhC,EAAuCI,IAAvC,C;;;AAAlBE,gBAAAA,S;kDACC,IAAIX,KAAJ,CAAU;AACfY,kBAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,kBAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,kBAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,2BAAI,IAAIjB,IAAJ,CAASiB,IAAT,CAAJ;AAAA,mBAAxB;AAHQ,iBAAV,C;;;;;;;;;;;;;;;;;;qCAOuB;AAC9B,aAAO,KAAKb,WAAL,CAAiBc,cAAjB,EAAP;AACD;;;;iGAEcZ,K,EAAea,O;;;;;;;uBACJ,KAAKd,iBAAL,CAAuBe,QAAvB,CAAgCd,KAAhC,EAAuCa,OAAvC,C;;;AAAlBP,gBAAAA,S;kDACC,IAAIX,KAAJ,CAAU;AACfY,kBAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,kBAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,kBAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,2BAAI,IAAIjB,IAAJ,CAASiB,IAAT,CAAJ;AAAA,mBAAxB;AAHQ,iBAAV,C;;;;;;;;;;;;;;;;;;;kGAOOX,K;;;;;;;uBACO,KAAKD,iBAAL,CAAuBgB,SAAvB,CAAiCf,KAAjC,C;;;AAAfgB,gBAAAA,M;kDACCA,MAAM,CAACN,GAAP,CACL,UAAAJ,SAAS;AAAA,yBACP,IAAIX,KAAJ,CAAU;AACRY,oBAAAA,EAAE,EAAED,SAAS,CAACC,EADN;AAERC,oBAAAA,IAAI,EAAEF,SAAS,CAACE,IAFR;AAGRC,oBAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,6BAAI,IAAIjB,IAAJ,CAASiB,IAAT,CAAJ;AAAA,qBAAxB;AAHC,mBAAV,CADO;AAAA,iBADJ,C;;;;;;;;;;;;;;;;;;sCAUSX,K,EAAoC;AAAA;;AACpD,aAAO,IAAIJ,QAAJ,CAAa,UAAAqB,IAAI,EAAI;AAC1B,YAAMC,QAAQ,GAAG,KAAI,CAACnB,iBAAL,CAAuBoB,iBAAvB,CAAyCnB,KAAzC,CAAjB;;AACAkB,QAAAA,QAAQ,CAACE,SAAT,CAAmB,UAAAC,UAAU,EAAI;AAC/BC,UAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAJ,UAAAA,IAAI,CACFI,UAAU,CAACX,GAAX,CACE,UAAAJ,SAAS;AAAA,mBACP,IAAIX,KAAJ,CAAU;AACRY,cAAAA,EAAE,EAAED,SAAS,CAACC,EADN;AAERC,cAAAA,IAAI,EAAEF,SAAS,CAACE,IAFR;AAGRC,cAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,uBAAI,IAAIjB,IAAJ,CAASiB,IAAT,CAAJ;AAAA,eAAxB;AAHC,aAAV,CADO;AAAA,WADX,CADE,CAAJ;AAUD,SAZD;AAaD,OAfM,CAAP;AAgBD;;;mCAE+B;AAC9B,aAAO,KAAKb,WAAL,CAAiB0B,YAAjB,EAAP;AACD;;;gCAEWxB,K,EAAea,O,EAAmC;AAC5D,aAAO,KAAKd,iBAAL,CAAuB0B,WAAvB,CAAmCzB,KAAnC,EAA0Ca,OAA1C,CAAP;AACD;;;iCAEYa,Q,EAAmC;AAC9C,aAAO,KAAK5B,WAAL,CAAiB6B,YAAjB,CAA8BD,QAA9B,CAAP;AACD;;;;;;AAGH,SAAS7B,QAAT","sourcesContent":["import { Card, Topic, User } from '@flashcards/core'\nimport { AuthService } from '../service/AuthService'\nimport { Observer } from '../service/Observer'\nimport { RepositoryService } from '../service/RepositoryService'\nimport { AddCardInput, AddCardUseCase } from './AddCard'\nimport { AddTopicInput, AddTopicUseCase } from './AddTopic'\nimport { GetCurrentUserUseCase } from './GetCurrentUser'\nimport { GetTopicUseCase } from './GetTopic'\nimport { GetTopicsUseCase } from './GetTopics'\nimport { GetTopicsObserverUseCase } from './GetTopicsObserver'\nimport { GetUserTokenUseCase } from './GetUserToken'\nimport { Observable } from './protocols'\nimport { RemoveTopicUseCase } from './RemoveTopic'\nimport { UserObserverInput, UserObserverUseCase } from './UserObserver'\n\nclass UseCases\n  implements\n    AddCardUseCase,\n    AddTopicUseCase,\n    GetCurrentUserUseCase,\n    GetTopicUseCase,\n    GetTopicsUseCase,\n    GetTopicsObserverUseCase,\n    GetUserTokenUseCase,\n    RemoveTopicUseCase,\n    UserObserverUseCase {\n  private readonly authService: AuthService\n  private readonly repositoryService: RepositoryService\n\n  constructor(authService: AuthService, repositoryService: RepositoryService) {\n    this.authService = authService\n    this.repositoryService = repositoryService\n  }\n\n  async addCard(token: string, input: AddCardInput): Promise<Card> {\n    const cardData = await this.repositoryService.addCard(token, input)\n    return new Card(cardData)\n  }\n\n  async addTopic(token: string, data: AddTopicInput): Promise<Topic> {\n    const topicData = await this.repositoryService.addTopic(token, data)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n\n  getCurrentUser(): Promise<User> {\n    return this.authService.getCurrentUser()\n  }\n\n  async getTopic(token: string, topicId: string): Promise<Topic> {\n    const topicData = await this.repositoryService.getTopic(token, topicId)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n\n  async getTopics(token: string): Promise<Topic[]> {\n    const topics = await this.repositoryService.getTopics(token)\n    return topics.map(\n      topicData =>\n        new Topic({\n          id: topicData.id,\n          name: topicData.name,\n          cards: topicData.cards.map(card => new Card(card)),\n        }),\n    )\n  }\n\n  getTopicsObserver(token: string): Observable<Topic[]> {\n    return new Observer(next => {\n      const observer = this.repositoryService.getTopicsObserver(token)\n      observer.subscribe(topicsData => {\n        console.log(topicsData)\n        next(\n          topicsData.map(\n            topicData =>\n              new Topic({\n                id: topicData.id,\n                name: topicData.name,\n                cards: topicData.cards.map(card => new Card(card)),\n              }),\n          ),\n        )\n      })\n    })\n  }\n\n  getUserToken(): Promise<string> {\n    return this.authService.getUserToken()\n  }\n\n  removeTopic(token: string, topicId: string): Promise<boolean> {\n    return this.repositoryService.removeTopic(token, topicId)\n  }\n\n  userObserver(callback: UserObserverInput): void {\n    return this.authService.userObserver(callback)\n  }\n}\n\nexport { UseCases }\n"]},"metadata":{},"sourceType":"module"}