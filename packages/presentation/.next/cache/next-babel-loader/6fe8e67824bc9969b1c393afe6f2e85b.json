{"ast":null,"code":"import { UserData } from '../../usecase/protocols';\nimport { LoginProvidersData } from '../../usecase/protocols/LoginProvidersData';\nimport firebase from './firebase';\n\nfunction getFirebaseProvider(provider) {\n  switch (provider) {\n    case LoginProvidersData.Google:\n      return new firebase.auth.GoogleAuthProvider();\n\n    case LoginProvidersData.Facebook:\n      return new firebase.auth.FacebookAuthProvider();\n  }\n}\n\nconst loginWithProvider = async (provider) => {\n  var _user$displayName, _user$email, _user$emailVerified, _user$photoURL;\n\n  const firebaseProvider = getFirebaseProvider(provider);\n  const {\n    user\n  } = await firebase.auth().signInWithPopup(firebaseProvider);\n  const token = await (user === null || user === void 0 ? void 0 : user.getIdToken(true));\n\n  if (user === null) {\n    return null;\n  }\n\n  return new UserData({\n    name: (_user$displayName = user.displayName) !== null && _user$displayName !== void 0 ? _user$displayName : '',\n    email: (_user$email = user.email) !== null && _user$email !== void 0 ? _user$email : '',\n    emailVerified: (_user$emailVerified = user.emailVerified) !== null && _user$emailVerified !== void 0 ? _user$emailVerified : false,\n    photoUrl: (_user$photoURL = user.photoURL) !== null && _user$photoURL !== void 0 ? _user$photoURL : '',\n    uid: user.uid,\n    token\n  });\n};\n\nexport { loginWithProvider };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/service/firebase/loginWithProvider.ts"],"names":["UserData","LoginProvidersData","firebase","getFirebaseProvider","provider","Google","auth","GoogleAuthProvider","Facebook","FacebookAuthProvider","loginWithProvider","firebaseProvider","user","signInWithPopup","token","getIdToken","name","displayName","email","emailVerified","photoUrl","photoURL","uid"],"mappings":"AAAA,SAASA,QAAT,QAAyB,yBAAzB;AACA,SAASC,kBAAT,QAAmC,4CAAnC;AAEA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,mBAAT,CACEC,QADF,EAE8B;AAC5B,UAAQA,QAAR;AACE,SAAKH,kBAAkB,CAACI,MAAxB;AACE,aAAO,IAAIH,QAAQ,CAACI,IAAT,CAAcC,kBAAlB,EAAP;;AACF,SAAKN,kBAAkB,CAACO,QAAxB;AACE,aAAO,IAAIN,QAAQ,CAACI,IAAT,CAAcG,oBAAlB,EAAP;AAJJ;AAMD;;AAED,MAAMC,iBAA2C,GAAG,OAClDN,QADkD,KAE/C;AAAA;;AACH,QAAMO,gBAAgB,GAAGR,mBAAmB,CAACC,QAAD,CAA5C;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAW,MAAMV,QAAQ,CAACI,IAAT,GAAgBO,eAAhB,CAAgCF,gBAAhC,CAAvB;AACA,QAAMG,KAAK,GAAG,OAAMF,IAAN,aAAMA,IAAN,uBAAMA,IAAI,CAAEG,UAAN,CAAiB,IAAjB,CAAN,CAAd;;AAEA,MAAIH,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,SAAO,IAAIZ,QAAJ,CAAa;AAClBgB,IAAAA,IAAI,uBAAEJ,IAAI,CAACK,WAAP,iEAAsB,EADR;AAElBC,IAAAA,KAAK,iBAAEN,IAAI,CAACM,KAAP,qDAAgB,EAFH;AAGlBC,IAAAA,aAAa,yBAAEP,IAAI,CAACO,aAAP,qEAAwB,KAHnB;AAIlBC,IAAAA,QAAQ,oBAAER,IAAI,CAACS,QAAP,2DAAmB,EAJT;AAKlBC,IAAAA,GAAG,EAAEV,IAAI,CAACU,GALQ;AAMlBR,IAAAA;AANkB,GAAb,CAAP;AAQD,CAnBD;;AAqBA,SAASJ,iBAAT","sourcesContent":["import { UserData } from '../../usecase/protocols'\nimport { LoginProvidersData } from '../../usecase/protocols/LoginProvidersData'\nimport { LoginWithProviderService } from '../../usecase/LoginWithProvider'\nimport firebase from './firebase'\n\nfunction getFirebaseProvider(\n  provider: LoginProvidersData,\n): firebase.auth.AuthProvider {\n  switch (provider) {\n    case LoginProvidersData.Google:\n      return new firebase.auth.GoogleAuthProvider()\n    case LoginProvidersData.Facebook:\n      return new firebase.auth.FacebookAuthProvider()\n  }\n}\n\nconst loginWithProvider: LoginWithProviderService = async (\n  provider: LoginProvidersData,\n) => {\n  const firebaseProvider = getFirebaseProvider(provider)\n  const { user } = await firebase.auth().signInWithPopup(firebaseProvider)\n  const token = await user?.getIdToken(true)\n\n  if (user === null) {\n    return null\n  }\n\n  return new UserData({\n    name: user.displayName ?? '',\n    email: user.email ?? '',\n    emailVerified: user.emailVerified ?? false,\n    photoUrl: user.photoURL ?? '',\n    uid: user.uid,\n    token,\n  })\n}\n\nexport { loginWithProvider }\n"]},"metadata":{},"sourceType":"module"}