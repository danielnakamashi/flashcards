{"ast":null,"code":"var _jsxFileName = \"/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/components/NewTopicForm/NewTopicForm.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { useStyles } from './NewTopicForm.style';\n\nconst NewTopicForm = ({\n  onTopicSubmitted\n}) => {\n  var _errors$name;\n\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    reset,\n    formState,\n    register,\n    errors\n  } = useForm();\n\n  const onSubmit = async values => {\n    onTopicSubmitted(values);\n    reset();\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(TextField, {\n    name: \"name\",\n    inputRef: register({\n      required: 'Provide a topic name'\n    }),\n    label: \"New Topic\",\n    variant: \"outlined\",\n    fullWidth: true,\n    defaultValue: \"\",\n    type: \"text\",\n    disabled: formState.isSubmitting,\n    helperText: (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message,\n    error: Boolean(errors.name),\n    InputLabelProps: {\n      htmlFor: 'name'\n    },\n    InputProps: {\n      inputProps: {\n        id: 'name'\n      },\n      endAdornment: __jsx(Button, {\n        className: classes.addTopicButton,\n        variant: \"contained\",\n        type: \"submit\",\n        \"data-testid\": \"submit-button\",\n        disabled: formState.isSubmitting,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      }, \"Add topic\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport { NewTopicForm };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/components/NewTopicForm/NewTopicForm.tsx"],"names":["React","useForm","Button","TextField","useStyles","NewTopicForm","onTopicSubmitted","classes","handleSubmit","reset","formState","register","errors","onSubmit","values","required","isSubmitting","name","message","Boolean","htmlFor","inputProps","id","endAdornment","addTopicButton"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,SAAT,QAA0B,sBAA1B;;AAUA,MAAMC,YAAyC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AAAA;;AAC1E,QAAMC,OAAO,GAAGH,SAAS,EAAzB;AACA,QAAM;AAAEI,IAAAA,YAAF;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA,SAAvB;AAAkCC,IAAAA,QAAlC;AAA4CC,IAAAA;AAA5C,MAAuDX,OAAO,EAApE;;AACA,QAAMY,QAAQ,GAAG,MAAOC,MAAP,IAA8B;AAC7CR,IAAAA,gBAAgB,CAACQ,MAAD,CAAhB;AACAL,IAAAA,KAAK;AACN,GAHD;;AAKA,SACE;AAAM,IAAA,QAAQ,EAAED,YAAY,CAACK,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAEF,QAAQ,CAAC;AAAEI,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAFpB;AAGE,IAAA,KAAK,EAAC,WAHR;AAIE,IAAA,OAAO,EAAC,UAJV;AAKE,IAAA,SAAS,MALX;AAME,IAAA,YAAY,EAAC,EANf;AAOE,IAAA,IAAI,EAAC,MAPP;AAQE,IAAA,QAAQ,EAAEL,SAAS,CAACM,YARtB;AASE,IAAA,UAAU,kBAAEJ,MAAM,CAACK,IAAT,iDAAE,aAAaC,OAT3B;AAUE,IAAA,KAAK,EAAEC,OAAO,CAACP,MAAM,CAACK,IAAR,CAVhB;AAWE,IAAA,eAAe,EAAE;AACfG,MAAAA,OAAO,EAAE;AADM,KAXnB;AAcE,IAAA,UAAU,EAAE;AACVC,MAAAA,UAAU,EAAE;AACVC,QAAAA,EAAE,EAAE;AADM,OADF;AAIVC,MAAAA,YAAY,EACV,MAAC,MAAD;AACE,QAAA,SAAS,EAAEhB,OAAO,CAACiB,cADrB;AAEE,QAAA,OAAO,EAAC,WAFV;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,uBAAY,eAJd;AAKE,QAAA,QAAQ,EAAEd,SAAS,CAACM,YALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALQ,KAdd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAmCD,CA3CD;;AA6CA,SAASX,YAAT","sourcesContent":["import React from 'react'\nimport { useForm } from 'react-hook-form'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { useStyles } from './NewTopicForm.style'\n\ntype FormFields = {\n  name: string\n}\n\ntype NewTopicFormProps = {\n  onTopicSubmitted: (topicFields: FormFields) => void\n}\n\nconst NewTopicForm: React.FC<NewTopicFormProps> = ({ onTopicSubmitted }) => {\n  const classes = useStyles()\n  const { handleSubmit, reset, formState, register, errors } = useForm<FormFields>()\n  const onSubmit = async (values: FormFields) => {\n    onTopicSubmitted(values)\n    reset()\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <TextField\n        name=\"name\"\n        inputRef={register({ required: 'Provide a topic name' })}\n        label=\"New Topic\"\n        variant=\"outlined\"\n        fullWidth\n        defaultValue=\"\"\n        type=\"text\"\n        disabled={formState.isSubmitting}\n        helperText={errors.name?.message}\n        error={Boolean(errors.name)}\n        InputLabelProps={{\n          htmlFor: 'name',\n        }}\n        InputProps={{\n          inputProps: {\n            id: 'name',\n          },\n          endAdornment: (\n            <Button\n              className={classes.addTopicButton}\n              variant=\"contained\"\n              type=\"submit\"\n              data-testid=\"submit-button\"\n              disabled={formState.isSubmitting}\n            >\n              Add topic\n            </Button>\n          ),\n        }}\n      />\n    </form>\n  )\n}\n\nexport { NewTopicForm }\n"]},"metadata":{},"sourceType":"module"}