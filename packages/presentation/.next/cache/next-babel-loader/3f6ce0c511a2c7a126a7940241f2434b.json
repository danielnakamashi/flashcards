{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, Topic } from '@flashcards/core';\n\nclass AddCard {\n  constructor(service) {\n    _defineProperty(this, \"service\", void 0);\n\n    this.service = service;\n  }\n\n  async addCard(token, input) {\n    const cardData = await this.service.addCard(token, input);\n    return new Card(cardData);\n  }\n\n  async addTopic(token, data) {\n    const topicData = await this.service.addTopic(token, data);\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card))\n    });\n  }\n\n}\n\nexport { AddCard };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/main/AddCard.ts"],"names":["Card","Topic","AddCard","constructor","service","addCard","token","input","cardData","addTopic","data","topicData","id","name","cards","map","card"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;;AAIA,MAAMC,OAAN,CAAwC;AAGtCC,EAAAA,WAAW,CAACC,OAAD,EAA0B;AAAA;;AACnC,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAED,QAAMC,OAAN,CAAcC,KAAd,EAA6BC,KAA7B,EAAiE;AAC/D,UAAMC,QAAQ,GAAG,MAAM,KAAKJ,OAAL,CAAaC,OAAb,CAAqBC,KAArB,EAA4BC,KAA5B,CAAvB;AACA,WAAO,IAAIP,IAAJ,CAASQ,QAAT,CAAP;AACD;;AAED,QAAMC,QAAN,CAAeH,KAAf,EAA8BI,IAA9B,EAAmE;AACjE,UAAMC,SAAS,GAAG,MAAM,KAAKP,OAAL,CAAaK,QAAb,CAAsBH,KAAtB,EAA6BI,IAA7B,CAAxB;AACA,WAAO,IAAIT,KAAJ,CAAU;AACfW,MAAAA,EAAE,EAAED,SAAS,CAACC,EADC;AAEfC,MAAAA,IAAI,EAAEF,SAAS,CAACE,IAFD;AAGfC,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI,IAAIhB,IAAJ,CAASgB,IAAT,CAA5B;AAHQ,KAAV,CAAP;AAKD;;AAnBqC;;AAsBxC,SAASd,OAAT","sourcesContent":["import { Card, Topic } from '@flashcards/core'\nimport { AddCardInput, AddCardService, AddCardUseCase } from '../usecase'\nimport { AddTopicInput } from '../usecase/AddTopic'\n\nclass AddCard implements AddCardUseCase {\n  private readonly service: AddCardService\n\n  constructor(service: AddCardService) {\n    this.service = service\n  }\n\n  async addCard(token: string, input: AddCardInput): Promise<Card> {\n    const cardData = await this.service.addCard(token, input)\n    return new Card(cardData)\n  }\n\n  async addTopic(token: string, data: AddTopicInput): Promise<Topic> {\n    const topicData = await this.service.addTopic(token, data)\n    return new Topic({\n      id: topicData.id,\n      name: topicData.name,\n      cards: topicData.cards.map(card => new Card(card)),\n    })\n  }\n}\n\nexport { AddCard }\n"]},"metadata":{},"sourceType":"module"}