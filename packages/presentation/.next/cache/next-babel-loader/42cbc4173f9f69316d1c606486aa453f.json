{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { UserData, LoginProvidersData } from '@flashcards/usecase';\n\nclass FirebaseService {\n  constructor(options) {\n    _defineProperty(this, \"firebase\", void 0);\n\n    if (firebase.apps.length === 0) {\n      firebase.initializeApp(options);\n    }\n  }\n\n  getUserToken() {\n    const firebaseUser = firebase.auth().currentUser;\n\n    if (!firebaseUser) {\n      return Promise.resolve(null);\n    }\n\n    return firebaseUser.getIdToken(true);\n  }\n\n  async getCurrentUser() {\n    var _firebaseUser$email, _firebaseUser$emailVe, _firebaseUser$display, _firebaseUser$photoUR;\n\n    const firebaseUser = firebase.auth().currentUser;\n\n    if (!firebaseUser) {\n      return null;\n    }\n\n    return {\n      email: (_firebaseUser$email = firebaseUser.email) !== null && _firebaseUser$email !== void 0 ? _firebaseUser$email : '',\n      emailVerified: (_firebaseUser$emailVe = firebaseUser.emailVerified) !== null && _firebaseUser$emailVe !== void 0 ? _firebaseUser$emailVe : false,\n      name: (_firebaseUser$display = firebaseUser.displayName) !== null && _firebaseUser$display !== void 0 ? _firebaseUser$display : '',\n      photoUrl: (_firebaseUser$photoUR = firebaseUser.photoURL) !== null && _firebaseUser$photoUR !== void 0 ? _firebaseUser$photoUR : '',\n      uid: firebaseUser.uid\n    };\n  }\n\n  userObserver(callback) {\n    firebase.auth().onAuthStateChanged(async firebaseUser => {\n      var _firebaseUser$email2, _firebaseUser$emailVe2, _firebaseUser$display2, _firebaseUser$photoUR2;\n\n      if (!firebaseUser) {\n        return callback(null);\n      }\n\n      callback({\n        email: (_firebaseUser$email2 = firebaseUser.email) !== null && _firebaseUser$email2 !== void 0 ? _firebaseUser$email2 : '',\n        emailVerified: (_firebaseUser$emailVe2 = firebaseUser.emailVerified) !== null && _firebaseUser$emailVe2 !== void 0 ? _firebaseUser$emailVe2 : false,\n        name: (_firebaseUser$display2 = firebaseUser.displayName) !== null && _firebaseUser$display2 !== void 0 ? _firebaseUser$display2 : '',\n        photoUrl: (_firebaseUser$photoUR2 = firebaseUser.photoURL) !== null && _firebaseUser$photoUR2 !== void 0 ? _firebaseUser$photoUR2 : '',\n        uid: firebaseUser.uid\n      });\n    });\n  }\n\n  getFirebaseProvider(provider) {\n    switch (provider) {\n      case LoginProvidersData.Google:\n        return new firebase.auth.GoogleAuthProvider();\n\n      case LoginProvidersData.Facebook:\n        return new firebase.auth.FacebookAuthProvider();\n    }\n  }\n\n  async loginWithProvider(provider) {\n    var _user$displayName, _user$email, _user$emailVerified, _user$photoURL;\n\n    const firebaseProvider = this.getFirebaseProvider(provider);\n    const {\n      user\n    } = await firebase.auth().signInWithPopup(firebaseProvider);\n    const token = await (user === null || user === void 0 ? void 0 : user.getIdToken(true));\n\n    if (user === null) {\n      return null;\n    }\n\n    return new UserData({\n      name: (_user$displayName = user.displayName) !== null && _user$displayName !== void 0 ? _user$displayName : '',\n      email: (_user$email = user.email) !== null && _user$email !== void 0 ? _user$email : '',\n      emailVerified: (_user$emailVerified = user.emailVerified) !== null && _user$emailVerified !== void 0 ? _user$emailVerified : false,\n      photoUrl: (_user$photoURL = user.photoURL) !== null && _user$photoURL !== void 0 ? _user$photoURL : '',\n      uid: user.uid,\n      token\n    });\n  }\n\n}\n\nexport { FirebaseService };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/service/src/firebase/index.ts"],"names":["firebase","UserData","LoginProvidersData","FirebaseService","constructor","options","apps","length","initializeApp","getUserToken","firebaseUser","auth","currentUser","Promise","resolve","getIdToken","getCurrentUser","email","emailVerified","name","displayName","photoUrl","photoURL","uid","userObserver","callback","onAuthStateChanged","getFirebaseProvider","provider","Google","GoogleAuthProvider","Facebook","FacebookAuthProvider","loginWithProvider","firebaseProvider","user","signInWithPopup","token"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport { UserData, LoginProvidersData } from '@flashcards/usecase'\nimport { AuthService } from '../AuthService'\n\nclass FirebaseService implements AuthService {\n  private readonly firebase: firebase.app.App\n\n  constructor(options: unknown) {\n    if (firebase.apps.length === 0) {\n      firebase.initializeApp(options)\n    }\n  }\n\n  getUserToken(): Promise<string> {\n    const firebaseUser = firebase.auth().currentUser\n\n    if (!firebaseUser) {\n      return Promise.resolve(null)\n    }\n\n    return firebaseUser.getIdToken(true)\n  }\n\n  async getCurrentUser(): Promise<UserData> {\n    const firebaseUser = firebase.auth().currentUser\n\n    if (!firebaseUser) {\n      return null\n    }\n\n    return {\n      email: firebaseUser.email ?? '',\n      emailVerified: firebaseUser.emailVerified ?? false,\n      name: firebaseUser.displayName ?? '',\n      photoUrl: firebaseUser.photoURL ?? '',\n      uid: firebaseUser.uid,\n    }\n  }\n\n  userObserver(callback: (user: UserData) => void): void {\n    firebase.auth().onAuthStateChanged(async firebaseUser => {\n      if (!firebaseUser) {\n        return callback(null)\n      }\n\n      callback({\n        email: firebaseUser.email ?? '',\n        emailVerified: firebaseUser.emailVerified ?? false,\n        name: firebaseUser.displayName ?? '',\n        photoUrl: firebaseUser.photoURL ?? '',\n        uid: firebaseUser.uid,\n      })\n    })\n  }\n\n  private getFirebaseProvider(provider: LoginProvidersData): firebase.auth.AuthProvider {\n    switch (provider) {\n      case LoginProvidersData.Google:\n        return new firebase.auth.GoogleAuthProvider()\n      case LoginProvidersData.Facebook:\n        return new firebase.auth.FacebookAuthProvider()\n    }\n  }\n\n  async loginWithProvider(provider: LoginProvidersData): Promise<UserData> {\n    const firebaseProvider = this.getFirebaseProvider(provider)\n    const { user } = await firebase.auth().signInWithPopup(firebaseProvider)\n    const token = await user?.getIdToken(true)\n\n    if (user === null) {\n      return null\n    }\n\n    return new UserData({\n      name: user.displayName ?? '',\n      email: user.email ?? '',\n      emailVerified: user.emailVerified ?? false,\n      photoUrl: user.photoURL ?? '',\n      uid: user.uid,\n      token,\n    })\n  }\n}\n\nexport { FirebaseService }\n"]},"metadata":{},"sourceType":"module"}