{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/topics/Topics.tsx\";\nimport { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { useAuth } from '@/contexts/auth';\nimport { Pages } from '@/models';\nimport { Header } from '@/components/Header';\nimport { NewTopicForm } from '@/components/NewTopicForm';\nimport { TopicsList } from '@/components/TopicsList';\nimport { useUseCases } from '@/hooks/useUseCases';\nimport { useStyles } from './Topics.styles';\nimport { withAuth } from '@/hocs/withAuth';\nimport { withRedirectToLogin } from '@/hocs/withRedirectToLogin';\n\nconst Topics = () => {\n  const {\n    user,\n    getToken\n  } = useAuth();\n  const styles = useStyles();\n  const {\n    0: topics,\n    1: setTopics\n  } = useState([]);\n  const {\n    0: token,\n    1: setToken\n  } = useState('');\n  const useCases = useUseCases();\n  useEffect(() => {\n    let isMounted = true;\n\n    (async () => {\n      const token = await getToken();\n\n      if (token && isMounted) {\n        setToken(token);\n      }\n    })();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [user]);\n  useEffect(() => {\n    let isMounted = true;\n\n    if (token) {\n      const unsubscribe = useCases.getTopicsObserver(token).subscribe(topics => {\n        if (isMounted) {\n          setTopics(topics);\n        }\n      });\n      return () => {\n        isMounted = false;\n        unsubscribe();\n      };\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(NewTopicForm, {\n          onTopicSubmitted: async ({\n            name\n          }) => {\n            useCases.addTopic(token, {\n              name\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TopicsList, {\n          items: topics,\n          onItemRemoved: async topicId => {\n            useCases.removeTopic(token, topicId);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nTopics.displayName = Pages.Home;\nconst TopicsDecorated = withAuth(withRedirectToLogin(Topics));\nexport { TopicsDecorated as Topics };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/topics/Topics.tsx"],"names":["useState","useEffect","Grid","useAuth","Pages","Header","NewTopicForm","TopicsList","useUseCases","useStyles","withAuth","withRedirectToLogin","Topics","user","getToken","styles","topics","setTopics","token","setToken","useCases","isMounted","unsubscribe","getTopicsObserver","subscribe","container","name","addTopic","topicId","removeTopic","displayName","Home","TopicsDecorated"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport { Topic } from '@flashcards/core'\nimport { useAuth } from '@/contexts/auth'\nimport { Pages } from '@/models'\nimport { Header } from '@/components/Header'\nimport { NewTopicForm } from '@/components/NewTopicForm'\nimport { TopicsList } from '@/components/TopicsList'\nimport { useUseCases } from '@/hooks/useUseCases'\nimport { useStyles } from './Topics.styles'\nimport { withAuth } from '@/hocs/withAuth'\nimport { withRedirectToLogin } from '@/hocs/withRedirectToLogin'\n\nconst Topics = () => {\n  const { user, getToken } = useAuth()\n  const styles = useStyles()\n  const [topics, setTopics] = useState<Topic[]>([])\n  const [token, setToken] = useState<string>('')\n  const useCases = useUseCases()\n\n  useEffect(() => {\n    let isMounted = true\n    ;(async () => {\n      const token = await getToken()\n      if (token && isMounted) {\n        setToken(token)\n      }\n    })()\n\n    return () => {\n      isMounted = false\n    }\n  }, [user])\n\n  useEffect(() => {\n    let isMounted = true\n\n    if (token) {\n      const unsubscribe = useCases.getTopicsObserver(token).subscribe(topics => {\n        if (isMounted) {\n          setTopics(topics)\n        }\n      })\n\n      return () => {\n        isMounted = false\n        unsubscribe()\n      }\n    }\n\n    return () => {\n      isMounted = false\n    }\n  }, [token])\n\n  return (\n    <>\n      <Header />\n      <Grid container direction=\"column\" className={styles.container}>\n        <Grid item>\n          <NewTopicForm\n            onTopicSubmitted={async ({ name }) => {\n              useCases.addTopic(token, { name })\n            }}\n          />\n        </Grid>\n        <Grid item>\n          <TopicsList\n            items={topics}\n            onItemRemoved={async (topicId: string) => {\n              useCases.removeTopic(token, topicId)\n            }}\n          />\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nTopics.displayName = Pages.Home\n\nconst TopicsDecorated = withAuth(withRedirectToLogin(Topics))\n\nexport { TopicsDecorated as Topics }\n"]},"metadata":{},"sourceType":"module"}