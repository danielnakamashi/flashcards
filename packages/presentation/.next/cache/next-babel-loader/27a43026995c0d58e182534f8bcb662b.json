{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Card, Topic } from '@flashcards/core';\n\nvar GetTopics = /*#__PURE__*/function () {\n  function GetTopics(service) {\n    _classCallCheck(this, GetTopics);\n\n    _defineProperty(this, \"service\", void 0);\n\n    this.service = service;\n  }\n\n  _createClass(GetTopics, [{\n    key: \"getTopics\",\n    value: function () {\n      var _getTopics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token) {\n        var topics;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.service.getTopics(token);\n\n              case 2:\n                topics = _context.sent;\n                return _context.abrupt(\"return\", topics.map(function (topicData) {\n                  return new Topic({\n                    id: topicData.id,\n                    name: topicData.name,\n                    cards: topicData.cards.map(function (card) {\n                      return new Card(card);\n                    })\n                  });\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getTopics(_x) {\n        return _getTopics.apply(this, arguments);\n      }\n\n      return getTopics;\n    }()\n  }]);\n\n  return GetTopics;\n}();\n\nexport { GetTopics };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/node_modules/@flashcards/client/src/main/GetTopics.ts"],"names":["Card","Topic","GetTopics","service","token","getTopics","topics","map","topicData","id","name","cards","card"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;;IAGMC,S;AAGJ,qBAAYC,OAAZ,EAAuC;AAAA;;AAAA;;AACrC,SAAKA,OAAL,GAAeA,OAAf;AACD;;;;;iGAEeC,K;;;;;;;uBACO,KAAKD,OAAL,CAAaE,SAAb,CAAuBD,KAAvB,C;;;AAAfE,gBAAAA,M;iDACCA,MAAM,CAACC,GAAP,CACL,UAAAC,SAAS;AAAA,yBACP,IAAIP,KAAJ,CAAU;AACRQ,oBAAAA,EAAE,EAAED,SAAS,CAACC,EADN;AAERC,oBAAAA,IAAI,EAAEF,SAAS,CAACE,IAFR;AAGRC,oBAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBJ,GAAhB,CAAoB,UAAAK,IAAI;AAAA,6BAAI,IAAIZ,IAAJ,CAASY,IAAT,CAAJ;AAAA,qBAAxB;AAHC,mBAAV,CADO;AAAA,iBADJ,C;;;;;;;;;;;;;;;;;;;;;AAWX,SAASV,SAAT","sourcesContent":["import { Card, Topic } from '@flashcards/core'\nimport { GetTopicsService, GetTopicsUseCase } from '../usecase'\n\nclass GetTopics implements GetTopicsUseCase {\n  private readonly service: GetTopicsService\n\n  constructor(service: GetTopicsService) {\n    this.service = service\n  }\n\n  async getTopics(token: string): Promise<Topic[]> {\n    const topics = await this.service.getTopics(token)\n    return topics.map(\n      topicData =>\n        new Topic({\n          id: topicData.id,\n          name: topicData.name,\n          cards: topicData.cards.map(card => new Card(card)),\n        }),\n    )\n  }\n}\n\nexport { GetTopics }\n"]},"metadata":{},"sourceType":"module"}