{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { useAuth } from '@/contexts/auth';\nimport { Pages } from '@/models';\nimport { Header } from '@/components/Header';\nimport { NewTopicForm } from '@/components/NewTopicForm';\nimport { TopicsList } from '@/components/TopicsList';\nimport { useUseCases } from '@/hooks/useUseCases';\nimport { useStyles } from './Topics.styles';\nimport { withAuth } from '@/hocs/withAuth';\nimport { withRedirectToLogin } from '@/hocs/withRedirectToLogin';\n\nconst Topics = () => {\n  const {\n    user,\n    getToken\n  } = useAuth();\n  const styles = useStyles();\n  const {\n    0: topics,\n    1: setTopics\n  } = useState([]);\n  const {\n    0: token,\n    1: setToken\n  } = useState('');\n  const {\n    getTopicsObserver,\n    addTopic,\n    removeTopic\n  } = useUseCases();\n  useEffect(() => {\n    let isMounted = true;\n\n    (async () => {\n      const token = await getToken();\n\n      if (token && isMounted) {\n        setToken(token);\n      }\n    })();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [user]);\n  useEffect(() => {\n    let isMounted = true;\n\n    if (token) {\n      const unsubscribe = getTopicsObserver(token).subscribe(topics => {\n        if (isMounted) {\n          setTopics(topics);\n        }\n      });\n      return () => {\n        isMounted = false;\n        unsubscribe();\n      };\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [token]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Header, {}), /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      direction: \"column\",\n      className: styles.container,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsx(NewTopicForm, {\n          onTopicSubmitted: async ({\n            name\n          }) => {\n            addTopic(token, {\n              name\n            });\n          }\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsx(TopicsList, {\n          items: topics,\n          onItemRemoved: async topicId => {\n            removeTopic(token, topicId);\n          }\n        })\n      })]\n    })]\n  });\n};\n\nTopics.displayName = Pages.Home;\nconst TopicsDecorated = withAuth(withRedirectToLogin(Topics));\nexport { TopicsDecorated as Topics };","map":null,"metadata":{},"sourceType":"module"}