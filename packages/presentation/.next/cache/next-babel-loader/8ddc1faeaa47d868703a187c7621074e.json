{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/topic/[topicId].tsx\";\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withAuth } from '@/hocs/withAuth';\nimport { withRedirectToLogin } from '@/hocs/withRedirectToLogin';\nimport { Pages } from '@/models';\nimport { Header } from '@/components/Header';\nimport { useToken } from '@/hooks/useToken';\nimport { useUseCases } from '@/hooks/useUseCases';\nimport { Flashcard } from '@/components/Flashcard';\nimport { NewCardForm } from '@/components/NewCardForm';\nimport { useStyles } from './[topicId].style';\nimport { addCard } from '@/main';\n\nconst Topic = () => {\n  const router = useRouter();\n  const styles = useStyles();\n  const token = useToken();\n  const {\n    getTopic\n  } = useUseCases();\n  const {\n    0: topic,\n    1: setTopic\n  } = useState(null);\n  const {\n    topicId\n  } = router.query;\n  useEffect(() => {\n    console.log('useEffect');\n    let isMounted = true;\n\n    if (token) {\n      getTopic(token, topicId).then(data => {\n        if (isMounted) {\n          setTopic(data);\n        }\n      });\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [token]);\n  console.log(token);\n\n  if (!topic) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      \"data-testid\": \"topic-page\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        spacing: 2,\n        className: styles.list,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h1\",\n            className: styles.title,\n            children: topic.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(NewCardForm, {\n            onAdd: async (question, answer) => {\n              await addCard(token, {\n                topicId,\n                question,\n                answer\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            spacing: 2,\n            children: topic.cards.map(card => /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 3,\n              children: /*#__PURE__*/_jsxDEV(Flashcard, {\n                front: card.front,\n                containerClassName: styles.flashCard,\n                children: card.back\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this)\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nTopic.displayName = Pages.Topic;\nconst TopicDecorated = withAuth(withRedirectToLogin(Topic));\nexport { TopicDecorated as default };","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/topic/[topicId].tsx"],"names":["useState","useEffect","useRouter","Grid","Typography","withAuth","withRedirectToLogin","Pages","Header","useToken","useUseCases","Flashcard","NewCardForm","useStyles","addCard","Topic","router","styles","token","getTopic","topic","setTopic","topicId","query","console","log","isMounted","then","data","list","title","name","question","answer","cards","map","card","front","flashCard","back","id","displayName","TopicDecorated","default"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { TopicData } from '@flashcards/client'\nimport { withAuth } from '@/hocs/withAuth'\nimport { withRedirectToLogin } from '@/hocs/withRedirectToLogin'\nimport { Pages } from '@/models'\nimport { Header } from '@/components/Header'\nimport { useToken } from '@/hooks/useToken'\nimport { useUseCases } from '@/hooks/useUseCases'\nimport { Flashcard } from '@/components/Flashcard'\nimport { NewCardForm } from '@/components/NewCardForm'\nimport { useStyles } from './[topicId].style'\nimport { addCard } from '@/main'\n\nconst Topic = () => {\n  const router = useRouter()\n  const styles = useStyles()\n  const token = useToken()\n  const { getTopic } = useUseCases()\n  const [topic, setTopic] = useState<TopicData | null>(null)\n  const { topicId } = router.query as { topicId: string }\n\n  useEffect(() => {\n    console.log('useEffect')\n    let isMounted = true\n\n    if (token) {\n      getTopic(token, topicId).then(data => {\n        if (isMounted) {\n          setTopic(data)\n        }\n      })\n    }\n    return () => {\n      isMounted = false\n    }\n  }, [token])\n\n  console.log(token)\n\n  if (!topic) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <>\n      <Header />\n      <main data-testid=\"topic-page\">\n        <Grid container direction=\"column\" spacing={2} className={styles.list}>\n          <Grid item>\n            <Typography variant=\"h1\" className={styles.title}>\n              {topic.name}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <NewCardForm\n              onAdd={async (question, answer) => {\n                await addCard(token, { topicId, question, answer })\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <Grid container direction=\"row\" spacing={2}>\n              {topic.cards.map(card => (\n                <Grid item key={card.id} xs={12} sm={6} md={3}>\n                  <Flashcard front={card.front} containerClassName={styles.flashCard}>\n                    {card.back}\n                  </Flashcard>\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </main>\n    </>\n  )\n}\n\nTopic.displayName = Pages.Topic\n\nconst TopicDecorated = withAuth(withRedirectToLogin(Topic))\n\nexport { TopicDecorated as default }\n"]},"metadata":{},"sourceType":"module"}