{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/topic/[topicId].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Pages } from '@/models';\nimport { Header } from '@/components/Header';\nimport { useToken } from '@/hooks/useToken';\nimport { useUseCases } from '@/hooks/useUseCases';\nimport { useStyles } from './[topicId].style';\n\nvar Topic = function Topic() {\n  _s();\n\n  var router = useRouter();\n  var styles = useStyles();\n  var token = useToken();\n\n  var _useUseCases = useUseCases(),\n      getTopic = _useUseCases.getTopic;\n\n  var _useState = useState(null),\n      topic = _useState[0],\n      setTopic = _useState[1];\n\n  var topicId = router.query.topicId;\n  console.log('render');\n  useEffect(function () {\n    var isMounted = true;\n\n    if (token) {\n      console.log('token', token);\n      getTopic(token, topicId).then(function (data) {\n        if (isMounted) {\n          setTopic(data);\n        }\n      });\n    }\n\n    return function () {\n      isMounted = false;\n    };\n  }, [token]);\n\n  if (!topic) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"main\", {\n      \"data-testid\": \"topic-page\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        spacing: 2,\n        className: styles.list,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h1\",\n            className: styles.title,\n            children: topic.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Topic, \"OPpT88l9c4JSIFSGWy6Y7AO8Cig=\", false, function () {\n  return [useRouter, useStyles, useToken, useUseCases];\n});\n\n_c = Topic;\nTopic.displayName = Pages.Topic;\nexport default Topic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Topic\");","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/topic/[topicId].tsx"],"names":["useState","useEffect","useRouter","Grid","Typography","Pages","Header","useToken","useUseCases","useStyles","Topic","router","styles","token","getTopic","topic","setTopic","topicId","query","console","log","isMounted","then","data","list","title","name","displayName"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,SAAT,QAA0B,mBAA1B;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA;;AAClB,MAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,MAAMU,MAAM,GAAGH,SAAS,EAAxB;AACA,MAAMI,KAAK,GAAGN,QAAQ,EAAtB;;AAHkB,qBAIGC,WAAW,EAJd;AAAA,MAIVM,QAJU,gBAIVA,QAJU;;AAAA,kBAKQd,QAAQ,CAAmB,IAAnB,CALhB;AAAA,MAKXe,KALW;AAAA,MAKJC,QALI;;AAAA,MAMVC,OANU,GAMEN,MAAM,CAACO,KANT,CAMVD,OANU;AAQlBE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIoB,SAAS,GAAG,IAAhB;;AAEA,QAAIR,KAAJ,EAAW;AACTM,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,KAArB;AACAC,MAAAA,QAAQ,CAACD,KAAD,EAAQI,OAAR,CAAR,CAAyBK,IAAzB,CAA8B,UAAAC,IAAI,EAAI;AACpC,YAAIF,SAAJ,EAAe;AACbL,UAAAA,QAAQ,CAACO,IAAD,CAAR;AACD;AACF,OAJD;AAKD;;AACD,WAAO,YAAM;AACXF,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAdQ,EAcN,CAACR,KAAD,CAdM,CAAT;;AAgBA,MAAI,CAACE,KAAL,EAAY;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAM,qBAAY,YAAlB;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,SAAS,EAAC,QAA1B;AAAmC,QAAA,OAAO,EAAE,CAA5C;AAA+C,QAAA,SAAS,EAAEH,MAAM,CAACY,IAAjE;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,IAApB;AAAyB,YAAA,SAAS,EAAEZ,MAAM,CAACa,KAA3C;AAAA,sBACGV,KAAK,CAACW;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA,kBADF;AAoCD,CAlED;;GAAMhB,K;UACWR,S,EACAO,S,EACDF,Q,EACOC,W;;;KAJjBE,K;AAoENA,KAAK,CAACiB,WAAN,GAAoBtB,KAAK,CAACK,KAA1B;AAEA,eAAeA,KAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { TopicData } from '@flashcards/client'\nimport { Pages } from '@/models'\nimport { Header } from '@/components/Header'\nimport { useToken } from '@/hooks/useToken'\nimport { useUseCases } from '@/hooks/useUseCases'\nimport { useStyles } from './[topicId].style'\n\nconst Topic = () => {\n  const router = useRouter()\n  const styles = useStyles()\n  const token = useToken()\n  const { getTopic } = useUseCases()\n  const [topic, setTopic] = useState<TopicData | null>(null)\n  const { topicId } = router.query\n\n  console.log('render')\n\n  useEffect(() => {\n    let isMounted = true\n\n    if (token) {\n      console.log('token', token)\n      getTopic(token, topicId).then(data => {\n        if (isMounted) {\n          setTopic(data)\n        }\n      })\n    }\n    return () => {\n      isMounted = false\n    }\n  }, [token])\n\n  if (!topic) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <>\n      <Header />\n      <main data-testid=\"topic-page\">\n        <Grid container direction=\"column\" spacing={2} className={styles.list}>\n          <Grid item>\n            <Typography variant=\"h1\" className={styles.title}>\n              {topic.name}\n            </Typography>\n          </Grid>\n          {/* <Grid item>\n            <NewCardForm\n              onAdd={async (question, answer) => {\n                await addCard({ question, answer }, topicId, user.uid)\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <Grid container direction=\"row\" spacing={2}>\n              {cards.map(card => (\n                <Grid item key={card.id} xs={12} sm={6} md={3}>\n                  <FlashCard\n                    front={card.question}\n                    containerClassName={styles.flashCard}\n                    onRemove={() => cardRemoveHandler(card)}\n                  >\n                    {card.answer}\n                  </FlashCard>\n                </Grid>\n              ))}\n            </Grid>\n          </Grid> */}\n        </Grid>\n      </main>\n    </>\n  )\n}\n\nTopic.displayName = Pages.Topic\n\nexport default Topic\n"]},"metadata":{},"sourceType":"module"}