{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/index.tsx\";\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Grid from '@material-ui/core/Grid';\nimport { useAuth } from 'contexts/auth';\nimport { Pages } from 'models';\nimport { Header } from 'components/Header';\nimport { NewTopicForm } from 'components/NewTopicForm';\nimport { TopicsList } from 'components/TopicsList';\nimport { Routes } from 'models/Routes';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { useQuery } from '@apollo/client';\nconst useStyles = makeStyles(theme => createStyles({\n  container: {\n    padding: theme.spacing(3)\n  },\n  gridList: {\n    marginTop: theme.spacing(3)\n  }\n}));\nconst QUERY = gql`\n  query Topics {\n    topics {\n      id\n      name\n    }\n  }\n`;\n\nfunction Home({\n  getTopicsObserver,\n  addTopic\n}) {\n  const router = useRouter();\n  const {\n    user,\n    loading\n  } = useAuth();\n  const styles = useStyles();\n  const {\n    0: topics,\n    1: setTopics\n  } = useState([]);\n  const {\n    data\n  } = useQuery(QUERY, {\n    context: {\n      headers: {\n        authentication: user.token\n      }\n    },\n    skip: !user.token\n  });\n  console.log('data', data); // useEffect(() => {\n  //   let isMounted = true\n  //   if (user?.token) {\n  //     return getTopicsObserver({ token: user.token }).subscribe(topics => {\n  //       console.log('subscribe')\n  //       if (isMounted) {\n  //         setTopics(topics)\n  //       }\n  //     })\n  //   }\n  //   return () => {\n  //     isMounted = false\n  //   }\n  // }, [user])\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!user) {\n    return router.push(Routes.login());\n  }\n\n  console.log(user);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(NewTopicForm, {\n          onTopicAdded: ({\n            name\n          }) => addTopic(user.token, {\n            name\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TopicsList, {\n          items: topics,\n          onItemRemoved: topicId => {// removeTopic(user.uid, topicId)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nHome.displayName = Pages.Home;\nexport default Home;","map":{"version":3,"sources":["/Users/daniel.nakamashi/Documents/projects/clean-flashcards/packages/presentation/pages/index.tsx"],"names":["useState","useRouter","Grid","useAuth","Pages","Header","NewTopicForm","TopicsList","Routes","makeStyles","createStyles","useQuery","useStyles","theme","container","padding","spacing","gridList","marginTop","QUERY","gql","Home","getTopicsObserver","addTopic","router","user","loading","styles","topics","setTopics","data","context","headers","authentication","token","skip","console","log","push","login","name","topicId","displayName"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Grid from '@material-ui/core/Grid'\nimport { GetTopicsObserverUseCase, AddTopicUseCase } from '@flashcards/client'\nimport { Topic } from '@flashcards/core'\nimport { useAuth } from 'contexts/auth'\nimport { Pages } from 'models'\nimport { Header } from 'components/Header'\nimport { NewTopicForm } from 'components/NewTopicForm'\nimport { TopicsList } from 'components/TopicsList'\nimport { Routes } from 'models/Routes'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { useQuery } from '@apollo/client'\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    container: {\n      padding: theme.spacing(3),\n    },\n    gridList: {\n      marginTop: theme.spacing(3),\n    },\n  }),\n)\n\nconst QUERY = gql`\n  query Topics {\n    topics {\n      id\n      name\n    }\n  }\n`\n\nfunction Home({\n  getTopicsObserver,\n  addTopic,\n}: {\n  getTopicsObserver: GetTopicsObserverUseCase\n  addTopic: AddTopicUseCase\n}) {\n  const router = useRouter()\n  const { user, loading } = useAuth()\n  const styles = useStyles()\n  const [topics, setTopics] = useState<Topic[]>([])\n\n  const { data } = useQuery(QUERY, {\n    context: {\n      headers: {\n        authentication: user.token,\n      },\n    },\n    skip: !user.token,\n  })\n  console.log('data', data)\n\n  // useEffect(() => {\n  //   let isMounted = true\n\n  //   if (user?.token) {\n  //     return getTopicsObserver({ token: user.token }).subscribe(topics => {\n  //       console.log('subscribe')\n  //       if (isMounted) {\n  //         setTopics(topics)\n  //       }\n  //     })\n  //   }\n\n  //   return () => {\n  //     isMounted = false\n  //   }\n  // }, [user])\n\n  if (loading) {\n    return <div>Loading...</div>\n  }\n\n  if (!user) {\n    return router.push(Routes.login())\n  }\n\n  console.log(user)\n\n  return (\n    <>\n      <Header />\n      <Grid container direction=\"column\" className={styles.container}>\n        <Grid item>\n          <NewTopicForm onTopicAdded={({ name }) => addTopic(user.token, { name })} />\n        </Grid>\n        <Grid item>\n          <TopicsList\n            items={topics}\n            onItemRemoved={(topicId: string) => {\n              // removeTopic(user.uid, topicId)\n            }}\n          />\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nHome.displayName = Pages.Home\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}